Index: Makefile.in
===================================================================
--- Makefile.in	(revision 1420)
+++ Makefile.in	(working copy)
@@ -59,6 +59,7 @@
 	bin/paqa_devs \
 	bin/paqa_errs \
 	bin/patest1 \
+	bin/patest2 \
 	bin/patest_buffer \
 	bin/patest_callbackstop \
 	bin/patest_clip \
Index: include/portaudio.h
===================================================================
--- include/portaudio.h	(revision 1420)
+++ include/portaudio.h	(working copy)
@@ -357,10 +357,97 @@
 */
 const PaHostErrorInfo* Pa_GetLastHostErrorInfo( void );
 
+/* Device enumeration and capabilities */
 
+/** Flags used to indicate which device states have changed.
+ 
+    @see paDevicesListAboutToBeChanged, paDevicesListChanged,
+    paDefaultInputDeviceChanged, paDefaultOutputDeviceChanged
+*/
+typedef unsigned long PaDevicesChangedFlags;
 
-/* Device enumeration and capabilities */
+/** Indicates that the list of devices is about to be changed.
 
+ This is sent before the list of devices is changed.  All PaDeviceInfo 
+ structures retrieved prior to this notification are about to be freed.
+
+ @see PaDevicesChangedFlags
+*/
+#define paDevicesListAboutToBeChanged   ((PaDevicesChangedFlags) 0x00000001)
+
+/** Indicates that the list of devices has changed.
+
+ This is sent after the PortAudio list of devices has changed.
+ All PaDeviceInfo structures retrieved prior to this notification are now 
+ invalid.
+
+ @see PaDevicesChangedFlags
+*/
+#define paDevicesListChanged            ((PaDevicesChangedFlags) 0x00000002)
+
+/** Indicates that the systems default input device has changed.
+
+ @see PaDevicesChangedFlags
+*/
+#define paDefaultInputDeviceChanged     ((PaDevicesChangedFlags) 0x00000004)
+
+/** Indicates that the systems default output device has changed.
+
+ @see PaDevicesChangedFlags
+*/
+#define paDefaultOutputDeviceChanged    ((PaDevicesChangedFlags) 0x00000008)
+
+/** Functions of type PaDevicesChangedCallback are implemented by PortAudio
+ clients. They can be registered using the Pa_SetDevicesChangedCallback
+ function. Once registered they are called when the state of installed devices
+ changes.
+
+ @param flags The flags indicate what aspects of the known devices has
+ changed.
+ @param userData The userData parameter supplied t Pa_SetDevicesChangedCallback().
+
+ @see Pa_AddDevicesChangedCallback, Pa_RemoveDevicesChangedCallback, 
+ PaDevicesChangedFlags
+ */
+typedef void PaDevicesChangedCallback( PaDevicesChangedFlags flags, 
+                                       void *userData );
+
+/** Add a devices changed callback function which will be called when the 
+ the state of installed devices changes.
+
+ @note If no callback is registered the traditional behavior of ignoring devices
+ changes is maintained. However, if a callback is registered then PortAudio 
+ will automatically rescan the set of available devices when a change is detected.
+ This is done in an attempt to maintain backwards compatibility for older 
+ clients.
+
+ @param userData A client supplied pointer which is passed to the stream callback
+ function. It could for example, contain a pointer to instance data necessary for
+ processing device change notifications.
+*/
+PaError Pa_AddDevicesChangedCallback( PaDevicesChangedCallback* devicesCallback,
+                                      void *userData );
+
+/** Remove a devices changed callback function which will be called when the 
+ the state of installed devices changes.
+
+ @param userData A client supplied pointer which is passed to the stream callback
+ function. It could for example, contain a pointer to instance data necessary for
+ processing device change notifications.
+*/
+PaError Pa_RemoveDevicesChangedCallback( PaDevicesChangedCallback* devicesCallback,
+                                      void *userData );
+
+/** Rescans the system in order to detect new devices.
+
+ It will call the registered PaDevicesChangedCallback with paDevicesListChanged
+ when it is done.
+
+ @note This will free all PaDeviceInfo structures that may have been returned
+ previously.
+*/
+PaError Pa_RescanDevices( void );
+
 /** Retrieve the number of available devices. The number of available devices
  may be zero.
 
@@ -471,7 +558,8 @@
 
  @note PortAudio manages the memory referenced by the returned pointer,
  the client must not manipulate or free the memory. The pointer is only
- guaranteed to be valid between calls to Pa_Initialize() and Pa_Terminate().
+ guaranteed to be valid between calls to Pa_Initialize(), Pa_RescanDevices(),
+ and Pa_Terminate().
 
  @see PaDeviceInfo, PaDeviceIndex
 */
Index: src/hostapi/alsa/pa_linux_alsa.c
===================================================================
--- src/hostapi/alsa/pa_linux_alsa.c	(revision 1420)
+++ src/hostapi/alsa/pa_linux_alsa.c	(working copy)
@@ -258,6 +258,7 @@
     (*hostApi)->info.name = "ALSA";
 
     (*hostApi)->Terminate = Terminate;
+    (*hostApi)->RescanDevices = NULL;
     (*hostApi)->OpenStream = OpenStream;
     (*hostApi)->IsFormatSupported = IsFormatSupported;
 
Index: src/hostapi/oss/pa_unix_oss.c
===================================================================
--- src/hostapi/oss/pa_unix_oss.c	(revision 1420)
+++ src/hostapi/oss/pa_unix_oss.c	(working copy)
@@ -254,6 +254,7 @@
     (*hostApi)->info.type = paOSS;
     (*hostApi)->info.name = "OSS";
     (*hostApi)->Terminate = Terminate;
+    (*hostApi)->RescanDevices = NULL;
     (*hostApi)->OpenStream = OpenStream;
     (*hostApi)->IsFormatSupported = IsFormatSupported;
 
Index: src/hostapi/wasapi/pa_win_wasapi.cpp
===================================================================
--- src/hostapi/wasapi/pa_win_wasapi.cpp	(revision 1420)
+++ src/hostapi/wasapi/pa_win_wasapi.cpp	(working copy)
@@ -642,6 +642,7 @@
     spEndpoints->Release();
 
     (*hostApi)->Terminate = Terminate;
+    (*hostApi)->RescanDevices = NULL;
     (*hostApi)->OpenStream = OpenStream;
     (*hostApi)->IsFormatSupported = IsFormatSupported;
 
@@ -1909,4 +1910,4 @@
 				stream->outVol->SetMute(FALSE, NULL);
 				bFirst = false;
 			}
-#endif
\ No newline at end of file
+#endif
Index: src/hostapi/wdmks/pa_win_wdmks.c
===================================================================
--- src/hostapi/wdmks/pa_win_wdmks.c	(revision 1420)
+++ src/hostapi/wdmks/pa_win_wdmks.c	(working copy)
@@ -1882,6 +1882,7 @@
     (*hostApi)->info.deviceCount = deviceCount;
 
     (*hostApi)->Terminate = Terminate;
+    (*hostApi)->RescanDevices = NULL;
     (*hostApi)->OpenStream = OpenStream;
     (*hostApi)->IsFormatSupported = IsFormatSupported;
 
@@ -3301,4 +3302,4 @@
     /* IMPLEMENT ME, see portaudio.h for required behavior*/
     PA_LOGL_;
     return 0;
-}
\ No newline at end of file
+}
Index: src/hostapi/wmme/pa_win_wmme.c
===================================================================
--- src/hostapi/wmme/pa_win_wmme.c	(revision 1420)
+++ src/hostapi/wmme/pa_win_wmme.c	(working copy)
@@ -1076,6 +1076,7 @@
     InitializeDefaultDeviceIdsFromEnv( winMmeHostApi );
 
     (*hostApi)->Terminate = Terminate;
+    (*hostApi)->RescanDevices = NULL;
     (*hostApi)->OpenStream = OpenStream;
     (*hostApi)->IsFormatSupported = IsFormatSupported;
 
Index: src/hostapi/jack/pa_jack.c
===================================================================
--- src/hostapi/jack/pa_jack.c	(revision 1420)
+++ src/hostapi/jack/pa_jack.c	(working copy)
@@ -747,6 +747,7 @@
     /* Register functions */
 
     (*hostApi)->Terminate = Terminate;
+    (*hostApi)->RescanDevices = NULL;
     (*hostApi)->OpenStream = OpenStream;
     (*hostApi)->IsFormatSupported = IsFormatSupported;
 
Index: src/hostapi/coreaudio/pa_mac_core.c
===================================================================
--- src/hostapi/coreaudio/pa_mac_core.c	(revision 1420)
+++ src/hostapi/coreaudio/pa_mac_core.c	(working copy)
@@ -70,6 +70,7 @@
 #include "pa_mac_core.h"
 #include "pa_mac_core_utilities.h"
 #include "pa_mac_core_blocking.h"
+#include "pa_debugprint.h"
 
 
 #ifdef __cplusplus
@@ -229,6 +230,7 @@
 #define RING_BUFFER_ADVANCE_DENOMINATOR (4)
 
 static void Terminate( struct PaUtilHostApiRepresentation *hostApi );
+static PaError RescanDevices( struct PaUtilHostApiRepresentation *hostApi );
 static PaError IsFormatSupported( struct PaUtilHostApiRepresentation *hostApi,
                                   const PaStreamParameters *inputParameters,
                                   const PaStreamParameters *outputParameters,
@@ -311,47 +313,13 @@
       sfc( stream->streamRepresentation.userData );
 }
 
-
-/*currently, this is only used in initialization, but it might be modified
-  to be used when the list of devices changes.*/
-static PaError gatherDeviceInfo(PaMacAUHAL *auhalHostApi)
+/* This is used during initialization, rescan, and default device changes to 
+ gather information about the current default input device. */
+static void gatherDefaultInputDevice(PaMacAUHAL *auhalHostApi)
 {
-    UInt32 size;
-    UInt32 propsize;
-    VVDBUG(("gatherDeviceInfo()\n"));
-    /* -- free any previous allocations -- */
-    if( auhalHostApi->devIds )
-        PaUtil_GroupFreeMemory(auhalHostApi->allocations, auhalHostApi->devIds);
-    auhalHostApi->devIds = NULL;
-
-    /* -- figure out how many devices there are -- */
-    AudioHardwareGetPropertyInfo( kAudioHardwarePropertyDevices,
-                                  &propsize,
-                                  NULL );
-    auhalHostApi->devCount = propsize / sizeof( AudioDeviceID );
-
-    VDBUG( ( "Found %ld device(s).\n", auhalHostApi->devCount ) );
-
-    /* -- copy the device IDs -- */
-    auhalHostApi->devIds = (AudioDeviceID *)PaUtil_GroupAllocateMemory(
-                             auhalHostApi->allocations,
-                             propsize );
-    if( !auhalHostApi->devIds )
-        return paInsufficientMemory;
-    AudioHardwareGetProperty( kAudioHardwarePropertyDevices,
-                                  &propsize,
-                                  auhalHostApi->devIds );
-#ifdef MAC_CORE_VERBOSE_DEBUG
-    {
-       int i;
-       for( i=0; i<auhalHostApi->devCount; ++i )
-          printf( "Device %d\t: %ld\n", i, auhalHostApi->devIds[i] );
-    }
-#endif
-
-    size = sizeof(AudioDeviceID);
+    UInt32 size = sizeof(AudioDeviceID);
+    VVDBUG(("gatherDefaultInputDevice()\n"));
     auhalHostApi->defaultIn  = kAudioDeviceUnknown;
-    auhalHostApi->defaultOut = kAudioDeviceUnknown;
 
     /* determine the default device. */
     /* I am not sure how these calls to AudioHardwareGetProperty()
@@ -372,8 +340,19 @@
                 auhalHostApi->defaultIn = auhalHostApi->devIds[i];
                 break;
              }
-       }
+      }
     }   
+    VDBUG( ( "Default in : %ld\n", auhalHostApi->defaultIn  ) );
+}
+
+/* This is used during initialization, rescan, and default device changes to 
+ gather information about the current default output device. */
+static void gatherDefaultOutputDevice(PaMacAUHAL *auhalHostApi)
+{
+    UInt32 size = sizeof(AudioDeviceID);
+    VVDBUG(("gatherDefaultOutputDevice()\n"));
+    auhalHostApi->defaultOut = kAudioDeviceUnknown;
+
     if( 0 != AudioHardwareGetProperty(kAudioHardwarePropertyDefaultOutputDevice,
                      &size,
                      &auhalHostApi->defaultOut) ) {
@@ -391,13 +370,119 @@
              }
        }
     }   
-
-    VDBUG( ( "Default in : %ld\n", auhalHostApi->defaultIn  ) );
     VDBUG( ( "Default out: %ld\n", auhalHostApi->defaultOut ) );
+}
 
+/* This is used during initialization and rescan to gather information about 
+ devices. */
+static PaError gatherDeviceInfo(PaMacAUHAL *auhalHostApi)
+{
+    //UInt32 size;
+    UInt32 propsize;
+    VVDBUG(("gatherDeviceInfo()\n"));
+    /* -- free any previous allocations -- */
+    if( auhalHostApi->devIds )
+        PaUtil_GroupFreeMemory(auhalHostApi->allocations, auhalHostApi->devIds);
+    auhalHostApi->devIds = NULL;
+
+    /* -- figure out how many devices there are -- */
+    AudioHardwareGetPropertyInfo( kAudioHardwarePropertyDevices,
+                                  &propsize,
+                                  NULL );
+    auhalHostApi->devCount = propsize / sizeof( AudioDeviceID );
+
+    VDBUG( ( "Found %ld device(s).\n", auhalHostApi->devCount ) );
+
+    /* -- copy the device IDs -- */
+    auhalHostApi->devIds = (AudioDeviceID *)PaUtil_GroupAllocateMemory(
+                             auhalHostApi->allocations,
+                             propsize );
+    if( !auhalHostApi->devIds )
+        return paInsufficientMemory;
+    AudioHardwareGetProperty( kAudioHardwarePropertyDevices,
+                                  &propsize,
+                                  auhalHostApi->devIds );
+#ifdef MAC_CORE_VERBOSE_DEBUG
+    {
+       int i;
+       for( i=0; i<auhalHostApi->devCount; ++i )
+          printf( "Device %d\t: %ld\n", i, auhalHostApi->devIds[i] );
+    }
+#endif
+
+    gatherDefaultInputDevice(auhalHostApi);
+    gatherDefaultOutputDevice(auhalHostApi);
+
     return paNoError;
 }
 
+/* Callback for audio hardware property changes. */
+static OSStatus audioPropertyCallback(AudioHardwarePropertyID inPropertyID, 
+                                      void *refCon)
+{
+    struct PaUtilHostApiRepresentation *hostApi = 
+        (struct PaUtilHostApiRepresentation *)refCon;
+    PaMacAUHAL *auhalHostApi = (PaMacAUHAL*)hostApi;
+    int i;
+    switch (inPropertyID)
+    {
+        /*
+         * These are the other types of notifications we might receive, however, they are beyond
+         * the scope of this sample and we ignore them.
+         **/
+    case kAudioHardwarePropertyDefaultInputDevice:
+        PA_DEBUG(("audioPropertyCallback: default input device changed\n"));
+
+        /* default to no device, in case we don't find it in the devIds. */
+        hostApi->info.defaultInputDevice = paNoDevice;
+        
+        gatherDefaultInputDevice(auhalHostApi);
+        
+        /* attempt to find the device amongst the known devIds. */
+        for( i=0; i < auhalHostApi->devCount; ++i )
+        {
+            if (auhalHostApi->devIds[i] == auhalHostApi->defaultIn)
+                hostApi->info.defaultInputDevice = i;
+        }
+
+        PaUtil_DevicesChanged( paDefaultInputDeviceChanged );
+        break;
+        
+    case kAudioHardwarePropertyDefaultOutputDevice:
+        PA_DEBUG(("audioPropertyCallback: default output device changed\n"));
+
+        /* default to no device, in case we don't find it in the devIds. */
+        hostApi->info.defaultOutputDevice = paNoDevice;
+
+        gatherDefaultOutputDevice(auhalHostApi);
+
+        /* attempt to find the device amongst the known devIds. */
+        for( i=0; i < auhalHostApi->devCount; ++i )
+        {
+            if (auhalHostApi->devIds[i] == auhalHostApi->defaultOut)
+                hostApi->info.defaultOutputDevice = i;
+        }
+
+        PaUtil_DevicesChanged( paDefaultOutputDeviceChanged );
+        break;
+        
+    case kAudioHardwarePropertyDefaultSystemOutputDevice:
+        PA_DEBUG(("audioPropertyCallback: default system output device changed\n"));
+        break;
+        
+    case kAudioHardwarePropertyDevices:
+        PA_DEBUG(("audioPropertyCallback: device list changed\n"));
+        PaUtil_DevicesChanged( paUtilHardwareDevicesChanged );
+        break;
+        
+    default:
+        PA_DEBUG(("audioPropertyCallback: unknown message id=%08lx\n", inPropertyID));
+        break;
+    }
+    
+    return noErr;
+}
+
 static PaError GetChannelInfo( PaMacAUHAL *auhalHostApi,
                                PaDeviceInfo *deviceInfo,
                                AudioDeviceID macCoreDeviceId,
@@ -619,6 +704,7 @@
     }
 
     (*hostApi)->Terminate = Terminate;
+    (*hostApi)->RescanDevices = RescanDevices;
     (*hostApi)->OpenStream = OpenStream;
     (*hostApi)->IsFormatSupported = IsFormatSupported;
 
@@ -640,6 +726,14 @@
                                       GetStreamReadAvailable,
                                       GetStreamWriteAvailable );
 
+    /* register the audio hardware change listener */
+    AudioHardwareAddPropertyListener(kAudioHardwarePropertyDevices, 
+                                     audioPropertyCallback, *hostApi);
+    AudioHardwareAddPropertyListener(kAudioHardwarePropertyDefaultInputDevice, 
+                                     audioPropertyCallback, *hostApi);
+    AudioHardwareAddPropertyListener(kAudioHardwarePropertyDefaultOutputDevice, 
+                                     audioPropertyCallback, *hostApi);
+    
     return result;
 
 error:
@@ -675,6 +769,14 @@
         TODO: Double check that everything is handled by alloc group
     */
 
+    /* unregister the audio property listener */
+    AudioHardwareRemovePropertyListener(kAudioHardwarePropertyDevices, 
+                                        audioPropertyCallback);
+    AudioHardwareRemovePropertyListener(kAudioHardwarePropertyDefaultInputDevice, 
+                                        audioPropertyCallback);
+    AudioHardwareRemovePropertyListener(kAudioHardwarePropertyDefaultOutputDevice, 
+                                        audioPropertyCallback);
+    
     if( auhalHostApi->allocations )
     {
         PaUtil_FreeAllAllocations( auhalHostApi->allocations );
@@ -684,7 +786,89 @@
     PaUtil_FreeMemory( auhalHostApi );
 }
 
+static PaError RescanDevices( struct PaUtilHostApiRepresentation *hostApi )
+{
+    PaError result = paNoError;
+    int i;
+    PaDeviceInfo *deviceInfoArray;
+    PaHostApiIndex hostApiIndex = Pa_HostApiTypeIdToHostApiIndex(hostApi->info.type);
+    PaMacAUHAL *auhalHostApi = (PaMacAUHAL*)hostApi;
 
+    VVDBUG(("RescanDevices()\n"));
+
+    auhalHostApi->devCount = 0;
+    hostApi->info.defaultInputDevice = paNoDevice;
+    hostApi->info.defaultOutputDevice = paNoDevice;
+    hostApi->info.deviceCount = 0;  
+
+    if ( hostApi->deviceInfos )
+        PaUtil_GroupFreeMemory( auhalHostApi->allocations, hostApi->deviceInfos );
+
+    /* get the info we need about the devices */
+    result = gatherDeviceInfo( auhalHostApi );
+    if( result != paNoError )
+       goto error;
+
+    if( auhalHostApi->devCount > 0 )
+    {
+        hostApi->deviceInfos = (PaDeviceInfo**)PaUtil_GroupAllocateMemory(
+                auhalHostApi->allocations, sizeof(PaDeviceInfo*) * auhalHostApi->devCount);
+        if( !hostApi->deviceInfos )
+        {
+            result = paInsufficientMemory;
+            goto error;
+        }
+
+        /* allocate all device info structs in a contiguous block */
+        deviceInfoArray = (PaDeviceInfo*)PaUtil_GroupAllocateMemory(
+                auhalHostApi->allocations, sizeof(PaDeviceInfo) * auhalHostApi->devCount );
+        if( !deviceInfoArray )
+        {
+            result = paInsufficientMemory;
+            goto error;
+        }
+
+        for( i=0; i < auhalHostApi->devCount; ++i )
+        {
+            int err;
+            err = InitializeDeviceInfo( auhalHostApi, &deviceInfoArray[i],
+                                      auhalHostApi->devIds[i],
+                                      hostApiIndex );
+            if (err == paNoError)
+            { /* copy some info and set the defaults */
+                hostApi->deviceInfos[hostApi->info.deviceCount] = &deviceInfoArray[i];
+                if (auhalHostApi->devIds[i] == auhalHostApi->defaultIn)
+                    hostApi->info.defaultInputDevice = hostApi->info.deviceCount;
+                if (auhalHostApi->devIds[i] == auhalHostApi->defaultOut)
+                    hostApi->info.defaultOutputDevice = hostApi->info.deviceCount;
+                hostApi->info.deviceCount++;
+            }
+            else
+            { /* there was an error. we need to shift the devices down, so we ignore this one */
+                int j;
+                auhalHostApi->devCount--;
+                for( j=i; j<auhalHostApi->devCount; ++j )
+                   auhalHostApi->devIds[j] = auhalHostApi->devIds[j+1];
+                i--;
+            }
+        }
+    }
+
+    return result;
+    
+error:
+    hostApi->info.deviceCount = 0;  
+    if( auhalHostApi )
+    {
+        if( auhalHostApi->allocations && hostApi->deviceInfos )
+        {
+            PaUtil_GroupFreeMemory( auhalHostApi->allocations, hostApi->deviceInfos );
+            hostApi->deviceInfos = 0;
+        }
+    }
+    return result;
+}
+
 static PaError IsFormatSupported( struct PaUtilHostApiRepresentation *hostApi,
                                   const PaStreamParameters *inputParameters,
                                   const PaStreamParameters *outputParameters,
@@ -1837,7 +2021,11 @@
                     &stream->inputAudioBufferList );
       /* FEEDBACK: I'm not sure what to do when this call fails. There's nothing in the PA API to
        * do about failures in the callback system. */
-      assert( !err );
+/*       assert( !err ); */
+      /* on error, try to be resilient */
+/*       if (!err) {  */
+/* 	  return noErr;  */
+/*       } */
 
       PaUtil_SetInputFrameCount( &(stream->bufferProcessor), frames );
       PaUtil_SetInterleavedInputChannels( &(stream->bufferProcessor),
@@ -2025,7 +2213,10 @@
       } while( err == -10874 && inNumberFrames > 1 );
       /* FEEDBACK: I'm not sure what to do when this call fails */
       ERR( err );
-      assert( !err );
+/*       assert( !err ); */
+/*       if (!err) {  */
+/* 	  return noErr;  */
+/*       } */
       if( stream->inputSRConverter || stream->outputUnit )
       {
          /* If this is duplex or we use a converter, put the data
Index: src/hostapi/asio/pa_asio.cpp
===================================================================
--- src/hostapi/asio/pa_asio.cpp	(revision 1420)
+++ src/hostapi/asio/pa_asio.cpp	(working copy)
@@ -1347,6 +1347,7 @@
 
 
     (*hostApi)->Terminate = Terminate;
+    (*hostApi)->RescanDevices = NULL;
     (*hostApi)->OpenStream = OpenStream;
     (*hostApi)->IsFormatSupported = IsFormatSupported;
 
Index: src/hostapi/dsound/pa_win_ds.c
===================================================================
--- src/hostapi/dsound/pa_win_ds.c	(revision 1420)
+++ src/hostapi/dsound/pa_win_ds.c	(working copy)
@@ -1134,6 +1134,7 @@
 
     
     (*hostApi)->Terminate = Terminate;
+    (*hostApi)->RescanDevices = NULL;
     (*hostApi)->OpenStream = OpenStream;
     (*hostApi)->IsFormatSupported = IsFormatSupported;
 
Index: src/common/pa_util.h
===================================================================
--- src/common/pa_util.h	(revision 1420)
+++ src/common/pa_util.h	(working copy)
@@ -154,8 +154,23 @@
 
 /* void Pa_Sleep( long msec );  must also be implemented in per-platform .c file */
 
+/** Indicates that the hardware list of devices has changed.
 
+ This is set when the hardware devices have changed.
 
+ It's value matches paDevicesListAboutToBeChanged.
+
+ @see PaDevicesChangedFlags, paDevicesListAboutToBeChanged
+*/
+#define paUtilHardwareDevicesChanged   ((PaDevicesChangedFlags) 0x00000001)
+
+/** Called by host api's when they detect that devices changed.
+
+ @see PaDevicesChangedFlags
+*/
+void PaUtil_DevicesChanged( PaDevicesChangedFlags flag );
+ 
+
 #ifdef __cplusplus
 }
 #endif /* __cplusplus */
Index: src/common/pa_skeleton.c
===================================================================
--- src/common/pa_skeleton.c	(revision 1420)
+++ src/common/pa_skeleton.c	(working copy)
@@ -76,6 +76,7 @@
 
 
 static void Terminate( struct PaUtilHostApiRepresentation *hostApi );
+static PaError RescanDevices( struct PaUtilHostApiRepresentation *hostApi );
 static PaError IsFormatSupported( struct PaUtilHostApiRepresentation *hostApi,
                                   const PaStreamParameters *inputParameters,
                                   const PaStreamParameters *outputParameters,
@@ -207,6 +208,7 @@
     }
 
     (*hostApi)->Terminate = Terminate;
+    (*hostApi)->RescanDevices = RescanDevices;
     (*hostApi)->OpenStream = OpenStream;
     (*hostApi)->IsFormatSupported = IsFormatSupported;
 
@@ -256,7 +258,91 @@
     PaUtil_FreeMemory( skeletonHostApi );
 }
 
+static PaError RescanDevices( struct PaUtilHostApiRepresentation *hostApi )
+{
+    PaError result = paNoError;
+    int i, deviceCount;
+    PaDeviceInfo *deviceInfoArray;
+    PaHostApiIndex hostApiIndex = Pa_HostApiTypeIdToHostApiIndex(hostApi->info.type);
+		PaSkeletonHostApiRepresentation *skeletonHostApi = (PaSkeletonHostApiRepresentation *)hostApi;
 
+		deviceCount = 0;
+    hostApi->info.defaultInputDevice = paNoDevice;
+    hostApi->info.defaultOutputDevice = paNoDevice;
+    hostApi->info.deviceCount = 0;  
+
+    if ( hostApi->deviceInfos )
+        PaUtil_GroupFreeMemory( skeletonHostApi->allocations, hostApi->deviceInfos );
+
+		deviceCount = 0; /* IMPLEMENT ME */
+    
+    if( deviceCount > 0 )
+    {
+        hostApi->deviceInfos = (PaDeviceInfo**)PaUtil_GroupAllocateMemory(
+                skeletonHostApi->allocations, sizeof(PaDeviceInfo*) * deviceCount );
+        if( !hostApi->deviceInfos )
+        {
+            result = paInsufficientMemory;
+            goto error;
+        }
+
+        /* allocate all device info structs in a contiguous block */
+        deviceInfoArray = (PaDeviceInfo*)PaUtil_GroupAllocateMemory(
+                skeletonHostApi->allocations, sizeof(PaDeviceInfo) * deviceCount );
+        if( !deviceInfoArray )
+        {
+            result = paInsufficientMemory;
+            goto error;
+        }
+
+        for( i=0; i < deviceCount; ++i )
+        {
+            PaDeviceInfo *deviceInfo = &deviceInfoArray[i];
+            deviceInfo->structVersion = 2;
+            deviceInfo->hostApi = hostApiIndex;
+            deviceInfo->name = 0; /* IMPLEMENT ME: allocate block and copy name eg:
+                deviceName = (char*)PaUtil_GroupAllocateMemory( skeletonHostApi->allocations, strlen(srcName) + 1 );
+                if( !deviceName )
+                {
+                    result = paInsufficientMemory;
+                    goto error;
+                }
+                strcpy( deviceName, srcName );
+                deviceInfo->name = deviceName;
+            */
+
+            deviceInfo->maxInputChannels = 0;  /* IMPLEMENT ME */
+            deviceInfo->maxOutputChannels = 0;  /* IMPLEMENT ME */
+            
+            deviceInfo->defaultLowInputLatency = 0.;  /* IMPLEMENT ME */
+            deviceInfo->defaultLowOutputLatency = 0.;  /* IMPLEMENT ME */
+            deviceInfo->defaultHighInputLatency = 0.;  /* IMPLEMENT ME */
+            deviceInfo->defaultHighOutputLatency = 0.;  /* IMPLEMENT ME */  
+
+            deviceInfo->defaultSampleRate = 0.; /* IMPLEMENT ME */
+            
+            hostApi->deviceInfos[i] = deviceInfo;
+            ++hostApi->info.deviceCount;
+        }
+    }
+
+		return result;
+    
+error:
+
+    hostApi->info.deviceCount = 0;  
+    if( skeletonHostApi )
+    {
+        if( skeletonHostApi->allocations && hostApi->deviceInfos )
+        {
+            PaUtil_GroupFreeMemory( skeletonHostApi->allocations, hostApi->deviceInfos );
+            hostApi->deviceInfos = 0;
+        }
+    }
+
+    return result;
+}
+
 static PaError IsFormatSupported( struct PaUtilHostApiRepresentation *hostApi,
                                   const PaStreamParameters *inputParameters,
                                   const PaStreamParameters *outputParameters,
Index: src/common/pa_front.c
===================================================================
--- src/common/pa_front.c	(revision 1420)
+++ src/common/pa_front.c	(working copy)
@@ -92,9 +92,6 @@
 #define PA_VERSION_  1899
 #define PA_VERSION_TEXT_ "PortAudio V19-devel (built " __DATE__  " " __TIME__ ")"
 
-
-
-
 int Pa_GetVersion( void )
 {
     return PA_VERSION_;
@@ -124,8 +121,18 @@
     strncpy( lastHostErrorText_, errorText, PA_LAST_HOST_ERROR_TEXT_LENGTH_ );
 }
 
+/* Used to store the list of devices changed callbacks */
+typedef struct DevicesChangedCallbackStorage
+{
+    PaDevicesChangedCallback* devicesCallback;
+    void *userData;
+    struct DevicesChangedCallbackStorage* nextCallback;
+} DevicesChangedCallbackStorage;
 
+/* The linked list of devices changed callbacks */
+static DevicesChangedCallbackStorage* firstDevicesChangedCallback = NULL;
 
+
 static PaUtilHostApiRepresentation **hostApis_ = 0;
 static int hostApisCount_ = 0;
 static int initializationCount_ = 0;
@@ -411,10 +418,10 @@
     case paIncompatibleStreamHostApi: result = "Incompatible stream host API"; break;
     case paBadBufferPtr:             result = "Bad buffer pointer"; break;
     default:                         
-		if( errorCode > 0 )
-			result = "Invalid error code (value greater than zero)"; 
+        if( errorCode > 0 )
+            result = "Invalid error code (value greater than zero)"; 
         else
-			result = "Invalid error code"; 
+            result = "Invalid error code"; 
         break;
     }
     return result;
@@ -633,6 +640,150 @@
 }
 
 
+PaError Pa_AddDevicesChangedCallback( PaDevicesChangedCallback* devicesCallback,
+                                      void *userData )
+{
+    if ( !devicesCallback )
+        return paNullCallback;
+
+    DevicesChangedCallbackStorage* callback = 
+        (DevicesChangedCallbackStorage*)PaUtil_AllocateMemory( sizeof(DevicesChangedCallbackStorage) );
+    if ( !callback )
+        return paInsufficientMemory;
+
+    callback->devicesCallback = devicesCallback;
+    callback->userData = userData;
+
+    callback->nextCallback = firstDevicesChangedCallback;
+    firstDevicesChangedCallback = callback;
+
+    return paNoError;
+}
+
+
+PaError Pa_RemoveDevicesChangedCallback( PaDevicesChangedCallback* devicesCallback,
+                                         void *userData )
+{
+    DevicesChangedCallbackStorage* previous = NULL;
+    DevicesChangedCallbackStorage* current = firstDevicesChangedCallback;
+
+    while ( current != NULL )
+    {
+        if ( ( current->devicesCallback == devicesCallback ) && 
+             ( current->userData == userData ) )
+        {
+            if ( previous == NULL )
+            {
+                firstDevicesChangedCallback = current->nextCallback;
+            }
+            else
+            {
+                previous->nextCallback = current->nextCallback;
+            }
+            PaUtil_FreeMemory( current );
+            return paNoError;
+        }
+        else
+        {
+            previous = current;
+            current = current->nextCallback;
+        }
+    }
+
+    return paNoError;
+}
+
+void PaUtil_DevicesChanged( PaDevicesChangedFlags flags )
+{
+    PA_DEBUG(( "PaUtil_DevicesChanged(%08x)\n", flags));
+
+    // if no callbacks are registered, then nothing to do
+    if ( !firstDevicesChangedCallback )
+        return;
+
+    /* if the hardware has changed */
+    if ( ( flags & paUtilHardwareDevicesChanged ) != 0 )
+    {
+        /* Rescan devices */
+        Pa_RescanDevices();
+        return;
+    }
+
+    /* call all registered callbacks */
+    DevicesChangedCallbackStorage* current = firstDevicesChangedCallback;
+    while ( current != NULL )
+    {
+        (*current->devicesCallback)( flags, current->userData );
+        current = current->nextCallback;
+    }
+}
+
+PaError Pa_RescanDevices( void )
+{
+    PaError result = paNotInitialized;
+    int i, baseDeviceIndex;
+
+    PA_LOGAPI_ENTER( "Pa_RescanDevices" );
+
+    if( !PA_IS_INITIALISED_ )
+    {
+        result = paNotInitialized;
+    }
+    else
+    {
+        /* call all registered callbacks to let them know the device list 
+           has changed. */
+        DevicesChangedCallbackStorage* current = firstDevicesChangedCallback;
+        while ( current != NULL )
+        {
+            (*current->devicesCallback)( paDevicesListAboutToBeChanged, 
+                                         current->userData );
+            current = current->nextCallback;
+        }
+
+        deviceCount_ = 0;
+        baseDeviceIndex = 0;
+
+        for (i = 0; i < hostApisCount_; i++)
+        {
+            PaUtilHostApiRepresentation* hostApi = hostApis_[i];
+            PA_DEBUG(( "before hostApis_[%d]->RescanDevices=%p.\n",i, hostApi->RescanDevices));
+
+            if ( hostApi->RescanDevices )
+                result = hostApi->RescanDevices( hostApi );
+                
+            PA_DEBUG(( "after hostApis_[%d].\n",i));
+            
+            assert( hostApi->info.defaultInputDevice < hostApi->info.deviceCount );
+            assert( hostApi->info.defaultOutputDevice < hostApi->info.deviceCount );
+            hostApi->privatePaFrontInfo.baseDeviceIndex = baseDeviceIndex;
+
+            if( hostApi->info.defaultInputDevice != paNoDevice )
+                hostApi->info.defaultInputDevice += baseDeviceIndex;
+
+            if( hostApi->info.defaultOutputDevice != paNoDevice )
+                hostApi->info.defaultOutputDevice += baseDeviceIndex;
+
+            baseDeviceIndex += hostApi->info.deviceCount;
+            deviceCount_ += hostApi->info.deviceCount;
+        }
+
+        /* call all registered callbacks to let them know the device list 
+           has changed. */
+        current = firstDevicesChangedCallback;
+        while ( current != NULL )
+        {
+            (*current->devicesCallback)( paDevicesListChanged, current->userData );
+            current = current->nextCallback;
+        }
+    }
+
+    PA_LOGAPI_EXIT_PAERROR( "Pa_RescanDevices", result );
+
+    return result;
+}
+
+
 PaDeviceIndex Pa_GetDeviceCount( void )
 {
     PaDeviceIndex result;
Index: src/common/pa_hostapi.h
===================================================================
--- src/common/pa_hostapi.h	(revision 1420)
+++ src/common/pa_hostapi.h	(working copy)
@@ -109,6 +109,21 @@
     void (*Terminate)( struct PaUtilHostApiRepresentation *hostApi );
 
     /**
+        (*RescanDevices)() is guaranteed to be called with a valid <hostApi>
+        parameter, which was previously returned from the same implementation's
+        initializer.
+        
+        If set to 0 the portaudio implementation will skip rescanning this host 
+        api.
+        
+        The host api implementation is allowed to modify the 
+        PaHostApiInfo::deviceCount, and the deviceInfos to reflect the new set
+        of devices.  If an error occurs during processing, the host api 
+        implementation MUST ensure that they are left in a consistant state.
+    */
+    PaError (*RescanDevices)( struct PaUtilHostApiRepresentation *hostApi );
+
+    /**
         The inputParameters and outputParameters pointers should not be saved
         as they will not remain valid after OpenStream is called.
 
