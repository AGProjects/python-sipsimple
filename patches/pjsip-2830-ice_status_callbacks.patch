Index: pjnath/include/pjnath/ice_strans.h
===================================================================
--- pjnath/include/pjnath/ice_strans.h	(revisi贸n: 3114)
+++ pjnath/include/pjnath/ice_strans.h	(copia de trabajo)
@@ -69,6 +69,13 @@
 
 } pj_ice_strans_op;
 
+typedef struct pj_ice_candidate_pair {
+    char local_type[8];
+    char local_ip[64];
+    char remote_type[8];
+    char remote_ip[64];
+} pj_ice_candidate_pair;
+
 /** 
  * This structure contains callbacks that will be called by the 
  * ICE stream transport.
@@ -104,6 +111,26 @@
 			       pj_ice_strans_op op,
 			       pj_status_t status);
 
+    /**
+     * This callback will be called when final ICE candidates are chosen.
+     *
+     * @param tp	        PJMEDIA ICE transport.
+     * @param status	        Operation status.
+     * @param pairs	        Chosen candidate pairs.
+     * @param duration          ICE negotiation duration.
+     * @param local_candidates  Local candidates.
+     * @param remote_candidates Remote candidates.
+     * @param valid_list        ICE valid candidates list.
+     */
+    void    (*on_ice_candidates_chosen)(pj_ice_strans *ice_st,
+			       pj_status_t status,
+			       pj_ice_candidate_pair rtp_pair,
+			       pj_ice_candidate_pair rtcp_pair,
+                               char *duration,
+                               char *local_candidates,
+                               char *remote_candidates,
+                               char *valid_list);
+
 } pj_ice_strans_cb;
 
 
Index: pjnath/src/pjnath/ice_strans.c
===================================================================
--- pjnath/src/pjnath/ice_strans.c	(revisi贸n: 3114)
+++ pjnath/src/pjnath/ice_strans.c	(copia de trabajo)
@@ -1011,21 +1011,131 @@
 	return PJ_EINVALIDOP;
 }
 
+/* ---------------------------------------- */
+
+static const char *check_state_name[] = 
+{
+    "Frozen",
+    "Waiting",
+    "In Progress",
+    "Succeeded",
+    "Failed"
+};
+
+/* String names for candidate types */
+static const char *cand_type_names[] =
+{
+    "host",
+    "srflx",
+    "prflx",
+    "relay"
+
+};
+
+static const char *dump_check(char *buffer, unsigned bufsize,
+			      const pj_ice_sess_checklist *clist,
+			      const pj_ice_sess_check *check)
+{
+    const pj_ice_sess_cand *lcand = check->lcand;
+    const pj_ice_sess_cand *rcand = check->rcand;
+    char laddr[PJ_INET6_ADDRSTRLEN];
+    int len;
+
+    PJ_CHECK_STACK();
+
+    pj_ansi_strcpy(laddr, pj_inet_ntoa(lcand->addr.ipv4.sin_addr));
+
+    if (lcand->addr.addr.sa_family == pj_AF_INET()) {
+	len = pj_ansi_snprintf(buffer, bufsize,
+			       "%d %d %s:%d %s:%d",
+			       (int)(check - (clist)->checks),
+			       check->lcand->comp_id,
+			       laddr, (int)pj_ntohs(lcand->addr.ipv4.sin_port),
+			       pj_inet_ntoa(rcand->addr.ipv4.sin_addr),
+			       (int)pj_ntohs(rcand->addr.ipv4.sin_port));
+    } else {
+	len = pj_ansi_snprintf(buffer, bufsize, "IPv6->IPv6");
+    }
+
+
+    if (len < 0)
+	len = 0;
+    else if (len >= (int)bufsize)
+	len = bufsize - 1;
+
+    buffer[len] = '\0';
+    return buffer;
+}
+
+static void dump_checklist(char *buf, pj_ice_sess *ice, 
+			   const pj_ice_sess_checklist *clist)
+{
+    unsigned i, tmp;
+
+    for (i=0; i<clist->count; ++i) {
+	const pj_ice_sess_check *c = &clist->checks[i];
+	tmp = pj_ansi_sprintf(buf, "%s %s %s\r\n",
+	     dump_check(ice->tmp.txt, sizeof(ice->tmp.txt), clist, c),
+	     (c->nominated ? "nominated" : "not_nominated"), 
+	     check_state_name[c->state]);
+        buf += tmp;
+    }
+}
+
+static void dump_candidates_lists(char *buf1, char *buf2, pj_ice_sess *ice)
+{
+    unsigned i, len; 
+    const pj_ice_sess_cand *cand;
+
+    for (i=0, len=0; i < ice->lcand_cnt; ++i) {
+        cand = &ice->lcand[i];
+        len = pj_ansi_sprintf(buf1, "%d %d %s:%d %s\r\n", 
+                                i, 
+                                cand->comp_id, 
+                                pj_inet_ntoa(cand->addr.ipv4.sin_addr),
+                                (int)pj_ntohs(cand->addr.ipv4.sin_port),
+	                        cand_type_names[cand->type]);
+        buf1 += len;
+    }
+
+    for (i=0, len=0; i < ice->rcand_cnt; ++i) {
+        cand = &ice->rcand[i];
+        len = pj_ansi_sprintf(buf2, "%d %d %s:%d %s\r\n", 
+                                i, 
+                                cand->comp_id, 
+                                pj_inet_ntoa(cand->addr.ipv4.sin_addr),
+                                (int)pj_ntohs(cand->addr.ipv4.sin_port),
+	                        cand_type_names[cand->type]);
+        buf2 += len;
+    }
+}
+
+/* ---------------------------------------- */
+
 /*
  * Callback called by ICE session when ICE processing is complete, either
  * successfully or with failure.
  */
+
 static void on_ice_complete(pj_ice_sess *ice, pj_status_t status)
 {
     pj_ice_strans *ice_st = (pj_ice_strans*)ice->user_data;
     pj_time_val t;
     unsigned msec;
+    char duration[12];
+    char valid_list[512];
+    char local_candidates[512];
+    char remote_candidates[512];
 
     sess_add_ref(ice_st);
 
+    struct pj_ice_candidate_pair rtp_pair;
+    struct pj_ice_candidate_pair rtcp_pair;
+
     pj_gettimeofday(&t);
     PJ_TIME_VAL_SUB(t, ice_st->start_time);
     msec = PJ_TIME_VAL_MSEC(t);
+    sprintf(duration, "%ds:%03d", msec/1000, msec%1000);
 
     if (ice_st->cb.on_ice_complete) {
 	if (status != PJ_SUCCESS) {
@@ -1045,6 +1155,7 @@
 	    PJ_LOG(4,(ice_st->obj_name, 
 		      "ICE negotiation success after %ds:%03d",
 		      msec/1000, msec%1000));
+            
 
 	    for (i=0; i<ice_st->comp_cnt; ++i) {
 		const pj_ice_sess_check *check;
@@ -1077,7 +1188,18 @@
 			      lip,
 			      pj_ice_get_cand_type_name(check->rcand->type),
 			      rip));
-			      
+
+                    if (i == 0) { /* Component ID 1: RTP */
+                        pj_ansi_sprintf(rtp_pair.local_type, "%s", pj_ice_get_cand_type_name(check->lcand->type));
+                        pj_ansi_sprintf(rtp_pair.local_ip, "%s", lip);
+                        pj_ansi_sprintf(rtp_pair.remote_type, "%s", pj_ice_get_cand_type_name(check->rcand->type));
+                        pj_ansi_sprintf(rtp_pair.remote_ip, "%s", rip);
+                    } else if (i == 1) { /* Component ID 2: RTCP */
+                        pj_ansi_sprintf(rtcp_pair.local_type, "%s", pj_ice_get_cand_type_name(check->lcand->type));
+                        pj_ansi_sprintf(rtcp_pair.local_ip, "%s", lip);
+                        pj_ansi_sprintf(rtcp_pair.remote_type, "%s", pj_ice_get_cand_type_name(check->rcand->type));
+                        pj_ansi_sprintf(rtcp_pair.remote_ip, "%s", rip);
+                    }
 		} else {
 		    PJ_LOG(4,(ice_st->obj_name, 
 			      "Comp %d: disabled", i+1));
@@ -1085,10 +1207,12 @@
 	    }
 	}
 
-	(*ice_st->cb.on_ice_complete)(ice_st, PJ_ICE_STRANS_OP_NEGOTIATION, 
-				      status);
+        dump_checklist(valid_list, ice, &ice->valid_list);
+        dump_candidates_lists(local_candidates, remote_candidates, ice);
 
-	
+	(*ice_st->cb.on_ice_complete)(ice_st, PJ_ICE_STRANS_OP_NEGOTIATION, status);
+    	(*ice_st->cb.on_ice_candidates_chosen)(ice_st, status, rtp_pair, rtcp_pair, duration, local_candidates, remote_candidates, valid_list);
+
     }
 
     sess_dec_ref(ice_st);
Index: pjmedia/include/pjmedia/transport_ice.h
===================================================================
--- pjmedia/include/pjmedia/transport_ice.h	(revisi贸n: 3114)
+++ pjmedia/include/pjmedia/transport_ice.h	(copia de trabajo)
@@ -58,7 +58,35 @@
     void    (*on_ice_complete)(pjmedia_transport *tp,
 			       pj_ice_strans_op op,
 			       pj_status_t status);
+    /**
+     * This callback will be called when final ICE candidates are chosen.
+     *
+     * @param tp	        PJMEDIA ICE transport.
+     * @param status	        Operation status.
+     * @param pairs	        Chosen candidate pairs.
+     * @param duration          ICE negotiation duration.
+     * @param local_candidates  Local candidates.
+     * @param remote_candidates Remote candidates.
+     * @param valid_list        ICE valid candidates list.
+     */
+    void    (*on_ice_candidates_chosen)(pjmedia_transport *tp,
+			       pj_status_t status,
+			       pj_ice_candidate_pair rtp_pair,
+			       pj_ice_candidate_pair rtcp_pair,
+                               char *duration,
+                               char *local_candidates,
+                               char *remote_candidates,
+                               char *valid_list);
 
+    /**
+     * This callback will be called when ICE fails.
+     *
+     * @param tp	PJMEDIA ICE transport.
+     * @param reason	Failure reason.
+     */
+    void    (*on_ice_failure)(pjmedia_transport *tp,
+			       char *reason);
+
 } pjmedia_ice_cb;
 
 
Index: pjmedia/src/pjmedia/transport_ice.c
===================================================================
--- pjmedia/src/pjmedia/transport_ice.c	(revisi贸n: 3114)
+++ pjmedia/src/pjmedia/transport_ice.c	(copia de trabajo)
@@ -142,11 +142,21 @@
 			   void *pkt, pj_size_t size,
 			   const pj_sockaddr_t *src_addr,
 			   unsigned src_addr_len);
+
 static void ice_on_ice_complete(pj_ice_strans *ice_st, 
 				pj_ice_strans_op op,
 			        pj_status_t status);
 
+static void ice_on_ice_candidates_chosen(pj_ice_strans *ice_st, 
+			        pj_status_t status,
+				pj_ice_candidate_pair rtp_pair,
+			        pj_ice_candidate_pair rtcp_pair,
+                                char *duration,
+                                char *local_candidates,
+                                char *remote_candidates,
+                                char *valid_list);
 
+
 static pjmedia_transport_op transport_ice_op = 
 {
     &transport_get_info,
@@ -235,6 +245,7 @@
     /* Configure ICE callbacks */
     pj_bzero(&ice_st_cb, sizeof(ice_st_cb));
     ice_st_cb.on_ice_complete = &ice_on_ice_complete;
+    ice_st_cb.on_ice_candidates_chosen = &ice_on_ice_candidates_chosen;
     ice_st_cb.on_rx_data = &ice_on_rx_data;
 
     /* Create ICE */
@@ -264,6 +275,10 @@
 		  "Stopping ICE, reason=%s", reason));
     }
 
+    /* Notify application about ICE failure */ 
+    if (tp_ice->cb.on_ice_failure)
+	(*tp_ice->cb.on_ice_failure)(&tp_ice->base, reason);
+
     pj_ice_strans_stop_ice(tp_ice->ice_st);
 
     tp_ice->use_ice = PJ_FALSE;
@@ -1691,6 +1706,25 @@
 }
 
 
+static void ice_on_ice_candidates_chosen(pj_ice_strans *ice_st, 
+                                pj_status_t result,
+				pj_ice_candidate_pair rtp_pair,
+			        pj_ice_candidate_pair rtcp_pair,
+                                char *duration,
+                                char *local_candidates,
+                                char *remote_candidates,
+                                char *valid_list)
+{
+    struct transport_ice *tp_ice;
+
+    tp_ice = (struct transport_ice*) pj_ice_strans_get_user_data(ice_st);
+
+    /* Notify application */
+    if (tp_ice->cb.on_ice_candidates_chosen)
+	(*tp_ice->cb.on_ice_candidates_chosen)(&tp_ice->base, result, rtp_pair, rtcp_pair, duration, local_candidates, remote_candidates, valid_list);
+}
+
+
 /* Simulate lost */
 static pj_status_t transport_simulate_lost(pjmedia_transport *tp,
 					   pjmedia_dir dir,
