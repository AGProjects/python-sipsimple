Index: pjmedia/src/pjmedia/mixer_port.c
==================================================================
--- pjmedia/src/pjmedia/mixer_port.c	(revision 3114)
+++ pjmedia/src/pjmedia/mixer_port.c	(working copy)
@@ -0,0 +1,124 @@
+/*
+ * Copyright (C) 2010 AG Projects
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
+ */
+
+#include <string.h>
+
+#include <pjmedia/mixer_port.h>
+#include <pjmedia/errno.h>
+#include <pj/assert.h>
+#include <pj/pool.h>
+#include <pj/string.h>
+
+
+#define SIGNATURE   PJMEDIA_PORT_SIGNATURE('M', 'I', 'X', 'R')
+#define MIN(a, b)   ((a)>(b)?(b):(a))
+
+struct mixer_port
+{
+    pjmedia_port    base;
+    pjmedia_frame   last_frame;
+    pj_size_t       buffer_size;
+};
+
+static pj_status_t mixer_get_frame(pjmedia_port *port, pjmedia_frame *frame);
+static pj_status_t mixer_put_frame(pjmedia_port *port, const pjmedia_frame *frame);
+static pj_status_t mixer_on_destroy(pjmedia_port *port);
+
+
+PJ_DEF(pj_status_t) pjmedia_mixer_port_create(pj_pool_t *pool,
+                                              unsigned sampling_rate,
+                                              unsigned channel_count,
+                                              unsigned samples_per_frame,
+                                              unsigned bits_per_sample,
+                                              pjmedia_port **p_port)
+{
+    struct mixer_port *port;
+    const pj_str_t name = pj_str("mixer-port");
+
+    PJ_ASSERT_RETURN(pool && p_port, PJ_EINVAL);
+
+    port = PJ_POOL_ZALLOC_T(pool, struct mixer_port);
+    PJ_ASSERT_RETURN(port != NULL, PJ_ENOMEM);
+
+    pjmedia_port_info_init(&port->base.info, &name, SIGNATURE, sampling_rate,
+                           channel_count, bits_per_sample, samples_per_frame);
+
+    port->base.get_frame = &mixer_get_frame;
+    port->base.put_frame = &mixer_put_frame;
+    port->base.on_destroy = &mixer_on_destroy;
+
+    port->last_frame.type = PJMEDIA_FRAME_TYPE_AUDIO;
+    port->last_frame.size = sizeof(pj_int16_t) * samples_per_frame;
+    pj_get_timestamp(&port->last_frame.timestamp);
+    port->last_frame.buf = pj_pool_calloc(pool, samples_per_frame, sizeof(pj_int16_t));
+    pjmedia_zero_samples((pj_int16_t*)port->last_frame.buf, samples_per_frame);
+
+    port->buffer_size = port->last_frame.size;
+
+    *p_port = port;
+    
+    return PJ_SUCCESS;
+}
+
+
+
+/*
+ * Put frame to file.
+ */
+static pj_status_t mixer_put_frame(pjmedia_port *this_port, const pjmedia_frame *frame)
+{
+    struct mixer_port* port = (struct mixer_port*) this_port;
+
+    if (!frame->size) {
+        return;
+    }
+
+    PJ_ASSERT_RETURN(frame->size <= port->buffer_size, PJ_EINVAL);
+
+    port->last_frame.type = frame->type;
+    port->last_frame.timestamp = frame->timestamp;
+    port->last_frame.size = MIN(port->buffer_size, frame->size);
+    memcpy(port->last_frame.buf, frame->buf, port->last_frame.size);
+
+    return PJ_SUCCESS;
+}
+
+
+/*
+ * Get frame from file.
+ */
+static pj_status_t mixer_get_frame(pjmedia_port *this_port, pjmedia_frame *frame)
+{
+    struct mixer_port* port = (struct mixer_port*) this_port;
+
+    frame->type = port->last_frame.type;
+    frame->size = port->last_frame.size;
+    frame->timestamp = port->last_frame.timestamp;
+    memcpy(frame->buf, port->last_frame.buf, port->last_frame.size);
+
+    return PJ_SUCCESS;
+}
+
+
+/*
+ * Destroy port.
+ */
+static pj_status_t mixer_on_destroy(pjmedia_port *this_port)
+{
+    return PJ_SUCCESS;
+}
Index: pjmedia/src/pjmedia/mixer_port.h
==================================================================
--- pjmedia/include/pjmedia/mixer_port.h	(revision 3114)
+++ pjmedia/include/pjmedia/mixer_port.h	(working copy)
@@ -0,0 +1,69 @@
+/* 
+ * Copyright (C) 2010 AG Projects
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
+ */
+
+#ifndef __PJMEDIA_MIXER_PORT_H__
+#define __PJMEDIA_MIXER_PORT_H__
+
+/**
+ * @file mixer_port.h
+ * @brief Mixer media port.
+ */
+#include <pjmedia/port.h>
+
+
+
+/**
+ * @defgroup PJMEDIA_MIXER_PORT Mixer Port
+ * @ingroup PJMEDIA_PORT
+ * @brief The second simplest type of media port which forwards the frames it
+ *        gets unchanged.
+ * @{
+ */
+
+
+PJ_BEGIN_DECL
+
+
+/**
+ * Create Mixer port.
+ *
+ * @param pool              Pool to allocate memory.
+ * @param sampling_rate     Sampling rate of the port.
+ * @param channel_count     Number of channels.
+ * @param samples_per_frame Number of samples per frame.
+ * @param bits_per_sample   Number of bits per sample.
+ * @param p_port            Pointer to receive the port instance.
+ *
+ * @return                  PJ_SUCCESS on success.
+ */
+PJ_DECL(pj_status_t) pjmedia_mixer_port_create(pj_pool_t *pool,
+                                               unsigned sampling_rate,
+                                               unsigned channel_count,
+                                               unsigned samples_per_frame,
+                                               unsigned bits_per_sample,
+                                               pjmedia_port **p_port);
+
+
+PJ_END_DECL
+
+/**
+ * @}
+ */
+
+
+#endif	/* __PJMEDIA_MIXER_PORT_H__ */
Index: pjmedia/include/pjmedia.h
==================================================================
--- pjmedia/include/pjmedia.h	(revision 3114)
+++ pjmedia/include/pjmedia.h	(working copy)
@@ -41,6 +41,7 @@
 #include <pjmedia/jbuf.h>
 #include <pjmedia/master_port.h>
 #include <pjmedia/mem_port.h>
+#include <pjmedia/mixer_port.h>
 #include <pjmedia/null_port.h>
 #include <pjmedia/plc.h>
 #include <pjmedia/port.h>
Index: pjmedia/build/Makefile
==================================================================
--- pjmedia/build/Makefile	(revision 3114)
+++ pjmedia/build/Makefile	(working copy)
@@ -52,7 +52,7 @@
 			conference.o delaybuf.o echo_common.o echo_port.o \
 			echo_suppress.o endpoint.o errno.o \
 			g711.o jbuf.o master_port.o mem_capture.o mem_player.o \
-			null_port.o plc_common.o port.o splitcomb.o \
+			mixer_port.o null_port.o plc_common.o port.o splitcomb.o \
 			resample_resample.o resample_libsamplerate.o \
 			resample_port.o rtcp.o rtcp_xr.o rtp.o \
 			sdp.o sdp_cmp.o sdp_neg.o \
