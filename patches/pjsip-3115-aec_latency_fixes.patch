--- pjmedia/src/pjmedia/echo_common.c	2009-06-24 17:26:59.000000000 +0200
+++ pjmedia/src/pjmedia/echo_common.c	2011-08-22 17:16:00.000000000 +0200
@@ -24,6 +24,7 @@
 #include <pj/assert.h>
 #include <pj/list.h>
 #include <pj/log.h>
+#include <pj/math.h>
 #include <pj/pool.h>
 #include "echo_internal.h"
 
@@ -46,8 +47,6 @@
     ec_operations   *op;
 
     pj_bool_t	     lat_ready;	    /* lat_buf has been filled in.	    */
-    unsigned	     lat_target_cnt;/* Target number of frames in lat_buf   */
-    unsigned	     lat_buf_cnt;   /* Actual number of frames in lat_buf   */
     struct frame     lat_buf;	    /* Frame queue for delayed playback	    */
     struct frame     lat_free;	    /* Free frame list.			    */
 
@@ -143,7 +142,7 @@
 					 unsigned options,
 					 pjmedia_echo_state **p_echo )
 {
-    unsigned ptime;
+    unsigned ptime, lat_cnt;
     pjmedia_echo_state *ec;
     pj_status_t status;
 
@@ -191,22 +190,21 @@
 
     /* Create latency buffers */
     ptime = samples_per_frame * 1000 / clock_rate;
-    if (latency_ms == 0) {
+    if (latency_ms > ptime) {
+	/* Normalize latency with delaybuf/WSOLA (5) latency */
+	latency_ms -= PJ_MIN(ptime, 5);
+    }
+    if (latency_ms < ptime) {
 	/* Give at least one frame delay to simplify programming */
 	latency_ms = ptime;
     }
-    ec->lat_target_cnt = latency_ms / ptime;
-    if (ec->lat_target_cnt != 0) {
-	unsigned i;
-	for (i=0; i < ec->lat_target_cnt; ++i)  {
-	    struct frame *frm;
-
-	    frm = (struct frame*) pj_pool_alloc(pool, (samples_per_frame<<1) +
-						      sizeof(struct frame));
-	    pj_list_push_back(&ec->lat_free, frm);
-	}
-    } else {
-	ec->lat_ready = PJ_TRUE;
+    lat_cnt = latency_ms / ptime;
+    while (lat_cnt--)  {
+	struct frame *frm;
+
+	frm = (struct frame*) pj_pool_alloc(pool, (samples_per_frame<<1) +
+						  sizeof(struct frame));
+	pj_list_push_back(&ec->lat_free, frm);
     }
 
     /* Create delay buffer to compensate drifts */
--- pjmedia/src/pjmedia/sound_port.c	2011-08-16 15:06:45.000000000 +0200
+++ pjmedia/src/pjmedia/sound_port.c	2011-08-22 17:12:17.000000000 +0200
@@ -549,7 +549,7 @@
 	//since actual input latency should be zero.
 	//delay_ms = (si.rec_latency + si.play_latency) * 1000 /
 	//	   snd_port->clock_rate;
-	delay_ms = si.play_latency * 1000 / snd_port->clock_rate;
+	delay_ms = (si.play_latency * 1000 / snd_port->clock_rate) * (3/4);
 	status = pjmedia_echo_create2(pool, snd_port->clock_rate, 
 				      snd_port->channel_count,
 				      snd_port->samples_per_frame, 
        /* Acquire name of card */
}
