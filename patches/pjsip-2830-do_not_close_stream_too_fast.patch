Index: pjmedia/src/pjmedia/pasound.c
==================================================================
--- pjmedia/src/pjmedia/pasound.c	(revision 3114)
+++ pjmedia/src/pjmedia/pasound.c	(working copy)
@@ -58,6 +58,7 @@
 	pj_uint32_t		 samples_per_sec;
 	unsigned		 samples_per_frame;
 	int			 channel_count;
+    pj_mutex_t      *mutex;
 
     PaStream		*rec_strm;
     PaStream		*play_strm;
@@ -323,8 +324,6 @@
     if (input == NULL)
 	return paContinue;
 
-    ENTER_PA_CALL_REGION_RETURN(paAbort);
-
     /* Known cases of callback's thread:
      * - The thread may be changed in the middle of a session, e.g: in MacOS 
      *   it happens when plugging/unplugging headphone.
@@ -341,6 +340,12 @@
 	PJ_LOG(5,(THIS_FILE, "Recorder thread started"));
     }
 
+    ENTER_PA_CALL_REGION_RETURN(paAbort);
+    if (pj_mutex_lock(stream->mutex) != PJ_SUCCESS) {
+        LEAVE_PA_CALL_REGION();
+        return paAbort;
+    }
+
     if (statusFlags & paInputUnderflow)
 	++stream->underflow;
     if (statusFlags & paInputOverflow)
@@ -399,6 +404,7 @@
 	stream->rec_buf_count += frameCount * stream->channel_count;
     }
 
+    pj_mutex_unlock(stream->mutex);
     LEAVE_PA_CALL_REGION();
 
     if (status==0) 
@@ -430,8 +436,6 @@
     if (output == NULL)
 	return paContinue;
 
-    ENTER_PA_CALL_REGION_RETURN(paAbort);
-
     /* Known cases of callback's thread:
      * - The thread may be changed in the middle of a session, e.g: in MacOS 
      *   it happens when plugging/unplugging headphone.
@@ -448,6 +452,12 @@
 	PJ_LOG(5,(THIS_FILE, "Player thread started"));
     }
 
+    ENTER_PA_CALL_REGION_RETURN(paAbort);
+    if (pj_mutex_lock(stream->mutex) != PJ_SUCCESS) {
+        LEAVE_PA_CALL_REGION();
+        return paAbort;
+    }
+
     if (statusFlags & paOutputUnderflow)
 	++stream->underflow;
     if (statusFlags & paOutputOverflow)
@@ -504,6 +514,7 @@
 	}
     }
 
+    pj_mutex_unlock(stream->mutex);
     LEAVE_PA_CALL_REGION();
     
     if (status==0) 
@@ -839,6 +850,7 @@
     stream->bytes_per_sample = bits_per_sample / 8;
     stream->channel_count = channel_count;
     stream->rec_cb = rec_cb;
+    pj_mutex_create_simple(lock_pool, "sndstream", &stream->mutex);
 
     stream->rec_buf = (pj_int16_t*)pj_pool_alloc(pool, 
               stream->samples_per_frame * stream->bytes_per_sample);
@@ -960,6 +972,7 @@
     stream->bytes_per_sample = bits_per_sample / 8;
     stream->channel_count = channel_count;
     stream->play_cb = play_cb;
+    pj_mutex_create_simple(lock_pool, "sndstream", &stream->mutex);
 
     stream->play_buf = (pj_int16_t*)pj_pool_alloc(pool, 
                stream->samples_per_frame * stream->bytes_per_sample);
@@ -1107,6 +1120,7 @@
     stream->channel_count = channel_count;
     stream->rec_cb = rec_cb;
     stream->play_cb = play_cb;
+    pj_mutex_create_simple(lock_pool, "sndstream", &stream->mutex);
 
     stream->rec_buf = (pj_int16_t*)pj_pool_alloc(pool, 
               stream->samples_per_frame * stream->bytes_per_sample);
@@ -1347,20 +1361,24 @@
 static pj_status_t __pjmedia_snd_stream_close(pjmedia_snd_stream *stream)
 {
     int i, err = 0;
+    pj_mutex_t *mutex = stream->mutex;
 
     stream->quit_flag = 1;
     for (i=0; !stream->rec_thread_exited && i<100; ++i) {
-    pj_thread_sleep(1);
+    pj_thread_sleep(10);
     }
     for (i=0; !stream->play_thread_exited && i<100; ++i) {
-    pj_thread_sleep(1);
+    pj_thread_sleep(10);
     }
 
+    pj_thread_sleep(1);
+
     PJ_LOG(5,(THIS_FILE, "Closing %.*s: %lu underflow, %lu overflow",
              (int)stream->name.slen,
              stream->name.ptr,
              stream->underflow, stream->overflow));
 
+    pj_mutex_lock(mutex);
     if (stream->play_strm)
     err = Pa_CloseStream(stream->play_strm);
 
@@ -1368,6 +1386,7 @@
     err = Pa_CloseStream(stream->rec_strm);
 
     pj_pool_release(stream->pool);
+    pj_mutex_unlock(mutex);
 
     return err ? PJMEDIA_ERRNO_FROM_PORTAUDIO(err) : PJ_SUCCESS;
 }
