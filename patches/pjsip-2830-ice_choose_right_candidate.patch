--- pjnath/src/pjnath/ice_session.c.bak	2010-02-16 19:16:47.000000000 +0100
+++ pjnath/src/pjnath/ice_session.c	2010-02-16 19:17:05.000000000 +0100
@@ -947,12 +947,24 @@
 }
 
 /* Sort checklist based on priority */
-static void sort_checklist(pj_ice_sess_checklist *clist)
+static void sort_checklist(pj_ice_sess *ice, pj_ice_sess_checklist *clist)
 {
     unsigned i;
+    pj_ice_sess_check **check_ptr[PJ_ICE_MAX_COMP*2];
+    unsigned check_ptr_cnt = 0;
+
+    for (i=0; i<ice->comp_cnt; ++i) {
+	if (ice->comp[i].valid_check) {
+	    check_ptr[check_ptr_cnt++] = &ice->comp[i].valid_check;
+	}
+	if (ice->comp[i].nominated_check) {
+	    check_ptr[check_ptr_cnt++] = &ice->comp[i].nominated_check;
+	}
+    }
 
     for (i=0; i<clist->count-1; ++i) {
 	unsigned j, highest = i;
+
 	for (j=i+1; j<clist->count; ++j) {
 	    if (CMP_CHECK_PRIO(&clist->checks[j], &clist->checks[highest]) > 0) {
 		highest = j;
@@ -961,12 +973,23 @@
 
 	if (highest != i) {
 	    pj_ice_sess_check tmp;
+	    unsigned k;
 
 	    pj_memcpy(&tmp, &clist->checks[i], sizeof(pj_ice_sess_check));
 	    pj_memcpy(&clist->checks[i], &clist->checks[highest], 
 		      sizeof(pj_ice_sess_check));
 	    pj_memcpy(&clist->checks[highest], &tmp, 
 		      sizeof(pj_ice_sess_check));
+
+	    /* Update valid and nominated check pointers, since we're moving
+	     * around checks
+	     */
+	    for (k=0; k<check_ptr_cnt; ++k) {
+		if (*check_ptr[k] == &clist->checks[highest])
+		    *check_ptr[k] = &clist->checks[i];
+		else if (*check_ptr[k] == &clist->checks[i])
+		    *check_ptr[k] = &clist->checks[highest];
+	    }
 	}
     }
 }
@@ -1577,7 +1600,7 @@
     }
 
     /* Sort checklist based on priority */
-    sort_checklist(clist);
+    sort_checklist(ice, clist);
 
     /* Prune the checklist */
     status = prune_checklist(ice, clist);
@@ -2234,12 +2257,14 @@
 	ice->valid_list.checks[i].nominated = check->nominated;
     }
 
-    /* Sort valid_list */
-    sort_checklist(&ice->valid_list);
-
     /* Update valid check and nominated check for the component */
     update_comp_check(ice, new_check->lcand->comp_id, new_check);
 
+    /* Sort valid_list (must do so after update_comp_check(), otherwise
+     * new_check will point to something else (#953)
+     */
+    sort_checklist(ice, &ice->valid_list);
+
     /* 7.1.2.2.2.  Updating Pair States
      * 
      * The agent sets the state of the pair that generated the check to
