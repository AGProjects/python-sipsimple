--- src/hostapi/alsa/pa_linux_alsa.c	2009-06-03 21:57:56.000000000 +0300
+++ src/hostapi/alsa/pa_linux_alsa.c	2010-04-22 14:26:41.081552093 +0300
@@ -2735,8 +2735,19 @@
     snd_pcm_sframes_t framesAvail = snd_pcm_avail_update( self->pcm );
     *xrunOccurred = 0;
 
-    if( -EPIPE == framesAvail )
-    {
+    /* Get pcm_state and check for xrun condition. On playback I often see
+     * xrun but avail_update does not return -EPIPE but framesAvail larger
+     * than bufferSize. In case of xrun status set xrun flag, leave framesize 
+     * as reported by avail_update, will be fixed below. In case avail_update
+     * returns -EPIPE process as usual.  wd-xxx
+     */
+    snd_pcm_state_t state = snd_pcm_state( self->pcm );  /* wd-xxx */
+    if (state == SND_PCM_STATE_XRUN) {
+        // printf("xrun, fav %d\n", framesAvail); fflush(stdout);  // DEBUG-WD
+        *xrunOccurred = 1;
+    }
+    if( -EPIPE == framesAvail) {
+        // printf("xrun-1, fav %d\n", framesAvail); fflush(stdout);  // DEBUG-WD
         *xrunOccurred = 1;
         framesAvail = 0;
     }
@@ -2745,6 +2756,11 @@
         ENSURE_( framesAvail, paUnanticipatedHostError );
     }
 
+    /* Fix frames avail, should not be bigger than bufferSize wd-xxx */
+    if (framesAvail > self->bufferSize) {
+        // printf("xrun-2, fav %d\n", framesAvail); fflush(stdout);  // DEBUG-WD
+        framesAvail = self->bufferSize;
+    }
     *numFrames = framesAvail;
 
 error:
@@ -3457,9 +3472,24 @@
     while( frames > 0 )
     {
         int xrun = 0;
-        PA_ENSURE( PaAlsaStream_WaitForFrames( stream, &framesAvail, &xrun ) );
-        framesGot = PA_MIN( framesAvail, frames );
+	PA_ENSURE( PaAlsaStream_WaitForFrames( stream, &framesAvail, &xrun ) );
+	/*
+	 * In case of overrun WaitForFrames leaves the capture stream in STATE_PREPARED
+	 * most of the time. handleXrun() restarts the ALSA stream only in case 
+	 * snd_pcm_recover() fails, which usually does not happen. 
+	 * Here we start the pcm stream again and go for another try. Another
+	 * option is: set result to paOverrun and return to caller. Then
+	 * the caller needs to call ReadStream again. This takes more time and
+	 * we lose even more frames.
+	 */
+	if (xrun) { /* wd-xxx */
+	  if( snd_pcm_state( stream->capture.pcm ) == SND_PCM_STATE_PREPARED ) {
+	      ENSURE_( snd_pcm_start( stream->capture.pcm ), paUnanticipatedHostError );
+	  }
+	  continue;
+	}
 
+        framesGot = PA_MIN( framesAvail, frames );
         PA_ENSURE( PaAlsaStream_SetUpBuffers( stream, &framesGot, &xrun ) );
         if( framesGot > 0 )
         {
@@ -3580,6 +3610,7 @@
 
         PA_ENSURE( PaAlsaStream_HandleXrun( stream ) );
         savail = snd_pcm_avail_update( stream->playback.pcm );
+	// printf("GSWA xrun, sav: %ld (%lx)\n", savail, savail); fflush(stdout);  // DEBUG-WD
 
         /* savail should not contain -EPIPE now, since PaAlsaStream_HandleXrun will only prepare the pcm */
         ENSURE_( savail, paUnanticipatedHostError );
