Index: pjmedia/src/pjmedia/mixer_port.c
==================================================================
--- pjmedia/src/pjmedia/mixer_port.c	(revision 3114)
+++ pjmedia/src/pjmedia/mixer_port.c	(working copy)
@@ -30,9 +30,13 @@
 
 struct mixer_port
 {
-    pjmedia_port    base;
-    pjmedia_frame   last_frame;
-    pj_size_t       buffer_size;
+    pjmedia_port        base;
+    //pjmedia_frame       last_frame;
+    pjmedia_frame_type  last_frame_type;
+    pj_size_t           last_frame_size;
+    pj_timestamp        last_frame_timestamp;
+    pj_int16_t*         buffer;
+    pj_size_t           buffer_size;
 };
 
 static pj_status_t mixer_get_frame(pjmedia_port *port, pjmedia_frame *frame);
@@ -62,13 +66,18 @@
     port->base.put_frame = &mixer_put_frame;
     port->base.on_destroy = &mixer_on_destroy;
 
-    port->last_frame.type = PJMEDIA_FRAME_TYPE_AUDIO;
-    port->last_frame.size = sizeof(pj_int16_t) * samples_per_frame;
-    pj_get_timestamp(&port->last_frame.timestamp);
-    port->last_frame.buf = pj_pool_calloc(pool, samples_per_frame, sizeof(pj_int16_t));
-    pjmedia_zero_samples((pj_int16_t*)port->last_frame.buf, samples_per_frame);
 
-    port->buffer_size = port->last_frame.size;
+    //port->last_frame.type = PJMEDIA_FRAME_TYPE_AUDIO;
+    //port->last_frame.size = sizeof(pj_int16_t) * samples_per_frame;
+    //pj_get_timestamp(&port->last_frame.timestamp);
+    //port->last_frame.buf = pj_pool_calloc(pool, samples_per_frame, sizeof(pj_int16_t));
+    //pjmedia_zero_samples((pj_int16_t*)port->last_frame.buf, samples_per_frame);
+
+    port->last_frame_type = PJMEDIA_FRAME_TYPE_NONE;
+    port->last_frame_size = 0;
+    port->last_frame_timestamp.u64 = 0;
+    port->buffer = (pj_int16_t*) pj_pool_calloc(pool, samples_per_frame, sizeof(pj_int16_t));
+    port->buffer_size = sizeof(pj_int16_t) * samples_per_frame;
 
     *p_port = port;
     
@@ -84,16 +93,19 @@
 {
     struct mixer_port* port = (struct mixer_port*) this_port;
 
-    if (!frame->size) {
+    if (!frame->size || frame->type != PJMEDIA_FRAME_TYPE_AUDIO) {
+        port->last_frame_type = PJMEDIA_FRAME_TYPE_NONE;
+        port->last_frame_size = 0;
+        port->last_frame_timestamp.u64 = 0;
         return;
     }
 
     PJ_ASSERT_RETURN(frame->size <= port->buffer_size, PJ_EINVAL);
 
-    port->last_frame.type = frame->type;
-    port->last_frame.timestamp = frame->timestamp;
-    port->last_frame.size = MIN(port->buffer_size, frame->size);
-    memcpy(port->last_frame.buf, frame->buf, port->last_frame.size);
+    port->last_frame_type = frame->type;
+    pj_get_timestamp(&port->last_frame_timestamp);
+    port->last_frame_size = MIN(port->buffer_size, frame->size);
+    memcpy(port->buffer, frame->buf, port->last_frame_size);
 
     return PJ_SUCCESS;
 }
@@ -105,11 +117,24 @@
 static pj_status_t mixer_get_frame(pjmedia_port *this_port, pjmedia_frame *frame)
 {
     struct mixer_port* port = (struct mixer_port*) this_port;
+    pj_timestamp now;
+    pj_uint32_t frame_age;
+    
+    pj_get_timestamp(&now);
+    frame_age = pj_elapsed_usec(&port->last_frame_timestamp, &now);
 
-    frame->type = port->last_frame.type;
-    frame->size = port->last_frame.size;
-    frame->timestamp = port->last_frame.timestamp;
-    memcpy(frame->buf, port->last_frame.buf, port->last_frame.size);
+    if (port->last_frame_timestamp.u64 != 0 && frame_age <= 100000) {
+        frame->type = port->last_frame_type;
+        frame->size = port->last_frame_size;
+        frame->timestamp.u64 = 0;
+        if (port->last_frame_size > 0) {
+            memcpy(frame->buf, port->buffer, port->last_frame_size);
+        }
+    } else {
+        frame->type = PJMEDIA_FRAME_TYPE_NONE;
+        frame->size = 0;
+        frame->timestamp.u64 = 0;
+    }
 
     return PJ_SUCCESS;
 }
