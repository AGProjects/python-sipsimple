Index: pjmedia/src/pjmedia/pasound.c
==================================================================
--- pjmedia/src/pjmedia/pasound.c	(revision 3114)
+++ pjmedia/src/pjmedia/pasound.c	(working copy)
@@ -75,12 +75,18 @@
 
     pj_bool_t		 rec_thread_exited;
     pj_bool_t		 rec_thread_initialized;
-    pj_thread_desc	 rec_thread_desc;
+    pj_thread_desc	 rec_thread_desc_1;
+    pj_thread_desc	 rec_thread_desc_2;
+    void            *rec_thread_desc_current;
+    void            *rec_thread_desc_next;
     pj_thread_t		*rec_thread;
 
     pj_bool_t		 play_thread_exited;
     pj_bool_t		 play_thread_initialized;
-    pj_thread_desc	 play_thread_desc;
+    pj_thread_desc	 play_thread_desc_1;
+    pj_thread_desc	 play_thread_desc_2;
+    void            *play_thread_desc_current;
+    void            *play_thread_desc_next;
     pj_thread_t		*play_thread;
 
     /* Sometime the record callback does not return framesize as configured
@@ -314,6 +320,7 @@
     pjmedia_snd_stream *stream = (pjmedia_snd_stream*) userData;
     pj_status_t status = 0;
     unsigned nsamples;
+    void *tmp;
 
     PJ_UNUSED_ARG(output);
     PJ_UNUSED_ARG(timeInfo);
@@ -335,9 +342,12 @@
      */
     if (stream->rec_thread_initialized == 0 || !pj_thread_is_registered()) 
     {
-	memset(stream->rec_thread_desc, 0, sizeof(stream->rec_thread_desc));
-	status = pj_thread_register("pa_rec", stream->rec_thread_desc, 
+	memset(stream->rec_thread_desc_next, 0, sizeof(pj_thread_desc));
+	status = pj_thread_register("pa_rec", (long*)stream->rec_thread_desc_next,
 				    &stream->rec_thread);
+    tmp = stream->rec_thread_desc_current;
+    stream->rec_thread_desc_current = stream->rec_thread_desc_next;
+    stream->rec_thread_desc_next = tmp;
 	stream->rec_thread_initialized = 1;
 	PJ_LOG(5,(THIS_FILE, "Recorder thread started"));
     }
@@ -420,6 +430,7 @@
     pjmedia_snd_stream *stream = (pjmedia_snd_stream*) userData;
     pj_status_t status = 0;
     unsigned nsamples_req = frameCount * stream->channel_count;
+    void *tmp;
 
     PJ_UNUSED_ARG(input);
     PJ_UNUSED_ARG(timeInfo);
@@ -441,9 +452,12 @@
      */
     if (stream->play_thread_initialized == 0 || !pj_thread_is_registered()) 
     {
-	memset(stream->play_thread_desc, 0, sizeof(stream->play_thread_desc));
-	status = pj_thread_register("portaudio", stream->play_thread_desc,
+	memset(stream->play_thread_desc_next, 0, sizeof(pj_thread_desc));
+	status = pj_thread_register("portaudio", (long*)stream->play_thread_desc_next,
 				    &stream->play_thread);
+    tmp = stream->play_thread_desc_current;
+    stream->play_thread_desc_current = stream->play_thread_desc_next;
+    stream->play_thread_desc_next = tmp;
 	stream->play_thread_initialized = 1;
 	PJ_LOG(5,(THIS_FILE, "Player thread started"));
     }
@@ -846,6 +860,11 @@
               stream->samples_per_frame * stream->bytes_per_sample);
     stream->rec_buf_count = 0;
 
+    stream->rec_thread_desc_current = (void*) stream->rec_thread_desc_1;
+    stream->rec_thread_desc_next = (void*) stream->rec_thread_desc_2;
+    stream->play_thread_desc_current = (void*) stream->play_thread_desc_1;
+    stream->play_thread_desc_next = (void*) stream->play_thread_desc_2;
+
     pj_bzero(&inputParam, sizeof(inputParam));
     inputParam.device = index;
     inputParam.channelCount = channel_count;
@@ -967,6 +986,11 @@
                stream->samples_per_frame * stream->bytes_per_sample);
     stream->play_buf_count = 0;
 
+    stream->rec_thread_desc_current = (void*) stream->rec_thread_desc_1;
+    stream->rec_thread_desc_next = (void*) stream->rec_thread_desc_2;
+    stream->play_thread_desc_current = (void*) stream->play_thread_desc_1;
+    stream->play_thread_desc_next = (void*) stream->play_thread_desc_2;
+
     pj_bzero(&outputParam, sizeof(outputParam));
     outputParam.device = index;
     outputParam.channelCount = channel_count;
@@ -1118,6 +1142,11 @@
                stream->samples_per_frame * stream->bytes_per_sample);
     stream->play_buf_count = 0;
 
+    stream->rec_thread_desc_current = (void*) stream->rec_thread_desc_1;
+    stream->rec_thread_desc_next = (void*) stream->rec_thread_desc_2;
+    stream->play_thread_desc_current = (void*) stream->play_thread_desc_1;
+    stream->play_thread_desc_next = (void*) stream->play_thread_desc_2;
+
     pj_bzero(&inputParam, sizeof(inputParam));
     inputParam.device = rec_id;
     inputParam.channelCount = channel_count;
