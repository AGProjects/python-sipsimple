--- pjmedia/include/pjmedia/transport.h	2008-12-23 18:27:53.000000000 +0100
+++ pjmedia/include/pjmedia/transport.h	2010-03-12 09:26:08.000000000 +0100
@@ -503,7 +503,7 @@
     /**
      * Specifies number of transport specific info included.
      */
-    int specific_info_cnt;
+    unsigned specific_info_cnt;
 
     /**
      * Buffer storage of transport specific info.
--- pjmedia/include/pjmedia/transport_ice.h	2010-03-12 09:24:42.000000000 +0100
+++ pjmedia/include/pjmedia/transport_ice.h	2010-03-12 09:44:06.000000000 +0100
@@ -79,6 +79,15 @@
                                char *valid_list);
 
     /**
+     * This callback will be called when ICE state changes.
+     *
+     * @param tp	        PJMEDIA ICE transport.
+     * @param state             ICE negotiation state.
+     */
+    void    (*on_ice_state)(pjmedia_transport *tp,
+			       char *state);
+
+    /**
      * This callback will be called when ICE fails.
      *
      * @param tp	PJMEDIA ICE transport.
@@ -91,6 +100,52 @@
 
 
 /**
+ * This structure specifies ICE transport specific info. This structure
+ * will be filled in media transport specific info.
+ */
+typedef struct pjmedia_ice_transport_info
+{
+    /**
+     * ICE sesion state.
+     */
+    pj_ice_strans_state sess_state;
+
+    /**
+     * Session role.
+     */
+    pj_ice_sess_role role;
+
+    /**
+     * Number of components in the component array. Before ICE negotiation
+     * is complete, the number represents the number of components of the
+     * local agent. After ICE negotiation has been completed successfully,
+     * the number represents the number of common components between local
+     * and remote agents.
+     */
+    unsigned comp_cnt;
+
+    /**
+     * Array of ICE components. Typically the first element denotes RTP and
+     * second element denotes RTCP.
+     */
+    struct
+    {
+	/**
+	 * Local candidate type.
+	 */
+	pj_ice_cand_type    lcand_type;
+
+	/**
+	 * Remote candidate type.
+	 */
+	pj_ice_cand_type    rcand_type;
+
+    } comp[2];
+
+} pjmedia_ice_transport_info;
+
+
+/**
  * Options that can be specified when creating ICE transport.
  */
 enum pjmedia_transport_ice_options
--- pjmedia/src/pjmedia/transport_ice.c	2010-03-12 09:24:42.000000000 +0100
+++ pjmedia/src/pjmedia/transport_ice.c	2010-03-12 09:47:55.000000000 +0100
@@ -156,6 +156,8 @@
                                 char *remote_candidates,
                                 char *valid_list);
 
+static void ice_on_ice_state(pj_ice_strans *ice_st, 
+                                char *state);
 
 static pjmedia_transport_op transport_ice_op = 
 {
@@ -246,6 +248,7 @@
     pj_bzero(&ice_st_cb, sizeof(ice_st_cb));
     ice_st_cb.on_ice_complete = &ice_on_ice_complete;
     ice_st_cb.on_ice_candidates_chosen = &ice_on_ice_candidates_chosen;
+    ice_st_cb.on_ice_state = &ice_on_ice_state;
     ice_st_cb.on_rx_data = &ice_on_rx_data;
 
     /* Create ICE */
@@ -1479,6 +1482,38 @@
 	info->src_rtcp_name = tp_ice->rtcp_src_addr;
     }
 
+    /* Fill up transport specific info */
+    if (info->specific_info_cnt < PJ_ARRAY_SIZE(info->spc_info)) {
+	pjmedia_transport_specific_info *tsi;
+	pjmedia_ice_transport_info *ii;
+	unsigned i;
+
+	pj_assert(sizeof(*ii) <= sizeof(tsi->buffer));
+	tsi = &info->spc_info[info->specific_info_cnt++];
+	tsi->type = PJMEDIA_TRANSPORT_TYPE_ICE;
+	tsi->cbsize = sizeof(*ii);
+
+	ii = (pjmedia_ice_transport_info*) tsi->buffer;
+	pj_bzero(ii, sizeof(*ii));
+
+	if (pj_ice_strans_has_sess(tp_ice->ice_st))
+	    ii->role = pj_ice_strans_get_role(tp_ice->ice_st);
+	else
+	    ii->role = PJ_ICE_SESS_ROLE_UNKNOWN;
+	ii->sess_state = pj_ice_strans_get_state(tp_ice->ice_st);
+	ii->comp_cnt = pj_ice_strans_get_running_comp_cnt(tp_ice->ice_st);
+	
+	for (i=1; i<=ii->comp_cnt && i<=PJ_ARRAY_SIZE(ii->comp); ++i) {
+	    const pj_ice_sess_check *chk;
+
+	    chk = pj_ice_strans_get_valid_pair(tp_ice->ice_st, i);
+	    if (chk) {
+		ii->comp[i-1].lcand_type = chk->lcand->type;
+		ii->comp[i-1].rcand_type = chk->rcand->type;
+	    }
+	}
+    }
+
     return PJ_SUCCESS;
 }
 
@@ -1725,6 +1760,18 @@
 }
 
 
+static void ice_on_ice_state(pj_ice_strans *ice_st, char *state)
+{
+    struct transport_ice *tp_ice;
+
+    tp_ice = (struct transport_ice*) pj_ice_strans_get_user_data(ice_st);
+
+    /* Notify application */
+    if (tp_ice->cb.on_ice_state)
+	(*tp_ice->cb.on_ice_state)(&tp_ice->base, state);
+}
+
+
 /* Simulate lost */
 static pj_status_t transport_simulate_lost(pjmedia_transport *tp,
 					   pjmedia_dir dir,
--- pjnath/include/pjnath/ice_strans.h	2010-03-12 09:24:42.000000000 +0100
+++ pjnath/include/pjnath/ice_strans.h	2010-03-12 09:48:42.000000000 +0100
@@ -131,6 +131,15 @@
                                char *remote_candidates,
                                char *valid_list);
 
+    /**
+     * This callback will be called when ICE state changes.
+     *
+     * @param tp	        PJMEDIA ICE transport.
+     * @param state             ICE negotiation state.
+     */
+    void    (*on_ice_state)(pj_ice_strans *ice_st,
+			       char *state);
+
 } pj_ice_strans_cb;
 
 
@@ -296,6 +305,51 @@
 } pj_ice_strans_cfg;
 
 
+/**
+ * ICE stream transport's state.
+ */
+typedef enum pj_ice_strans_state
+{
+    /**
+     * ICE stream transport is not created.
+     */
+    PJ_ICE_STRANS_STATE_NULL,
+
+    /**
+     * ICE candidate gathering process is in progress.
+     */
+    PJ_ICE_STRANS_STATE_INIT,
+
+    /**
+     * ICE stream transport initialization/candidate gathering process is
+     * complete, ICE session may be created on this stream transport.
+     */
+    PJ_ICE_STRANS_STATE_READY,
+
+    /**
+     * New session has been created and the session is ready.
+     */
+    PJ_ICE_STRANS_STATE_SESS_READY,
+
+    /**
+     * ICE negotiation is in progress.
+     */
+    PJ_ICE_STRANS_STATE_NEGO,
+
+    /**
+     * ICE negotiation has completed successfully and media is ready
+     * to be used.
+     */
+    PJ_ICE_STRANS_STATE_RUNNING,
+
+    /**
+     * ICE negotiation has completed with failure.
+     */
+    PJ_ICE_STRANS_STATE_FAILED
+
+} pj_ice_strans_state;
+
+
 /** 
  * Initialize ICE transport configuration with default values.
  *
@@ -340,6 +394,26 @@
 					  pj_ice_strans **p_ice_st);
 
 /**
+ * Get ICE session state.
+ *
+ * @param ice_st	The ICE stream transport.
+ *
+ * @return		ICE session state.
+ */
+PJ_DECL(pj_ice_strans_state) pj_ice_strans_get_state(pj_ice_strans *ice_st);
+
+
+/**
+ * Get string representation of ICE state.
+ *
+ * @param state		ICE stream transport state.
+ *
+ * @return		String.
+ */
+PJ_DECL(const char*) pj_ice_strans_state_name(pj_ice_strans_state state);
+
+
+/**
  * Destroy the ICE stream transport. This will destroy the ICE session
  * inside the ICE stream transport, close all sockets and release all
  * other resources.
--- pjnath/src/pjnath/ice_strans.c	2010-03-12 09:24:42.000000000 +0100
+++ pjnath/src/pjnath/ice_strans.c	2010-03-12 12:48:55.000000000 +0100
@@ -158,6 +158,7 @@
     pj_ice_strans_cb	     cb;	/**< Application callback.	*/
     pj_lock_t		    *init_lock; /**< Initialization mutex.	*/
 
+    pj_ice_strans_state	     state;	/**< Session state.		*/
     pj_ice_sess		    *ice;	/**< ICE session.		*/
     pj_time_val		     start_time;/**< Time when ICE was started	*/
 
@@ -478,6 +479,10 @@
      */
     pj_lock_acquire(ice_st->init_lock);
 
+    /* Move state to candidate gathering */
+    ice_st->state = PJ_ICE_STRANS_STATE_INIT;
+    (*ice_st->cb.on_ice_state)(ice_st, pj_ice_strans_state_name(ice_st->state));
+
     for (i=0; i<comp_cnt; ++i) {
 	status = create_comp(ice_st, i+1);
 	if (status != PJ_SUCCESS) {
@@ -546,6 +551,29 @@
     pj_pool_release(ice_st->pool);
 }
 
+/* Get ICE session state. */
+PJ_DEF(pj_ice_strans_state) pj_ice_strans_get_state(pj_ice_strans *ice_st)
+{
+    return ice_st->state;
+}
+
+/* State string */
+PJ_DEF(const char*) pj_ice_strans_state_name(pj_ice_strans_state state)
+{
+    const char *names[] = {
+	"Null",
+	"ICE Candidates Gathering",
+	"ICE Candidates Gathered",
+	"ICE Session Initialized",
+	"ICE Negotiation In Progress",
+	"ICE Negotiation Succeeded",
+	"ICE Negotiation Failed"
+    };
+
+    PJ_ASSERT_RETURN(state <= PJ_ICE_STRANS_STATE_FAILED, "???");
+    return names[state];
+}
+
 /* Notification about failure */
 static void sess_fail(pj_ice_strans *ice_st, pj_ice_strans_op op,
 		      const char *title, pj_status_t status)
@@ -588,6 +616,8 @@
 
     /* All candidates have been gathered */
     ice_st->cb_called = PJ_TRUE;
+    ice_st->state = PJ_ICE_STRANS_STATE_READY;
+    (*ice_st->cb.on_ice_state)(ice_st, pj_ice_strans_state_name(ice_st->state));
     if (ice_st->cb.on_ice_complete)
 	(*ice_st->cb.on_ice_complete)(ice_st, PJ_ICE_STRANS_OP_INIT, 
 				      PJ_SUCCESS);
@@ -767,6 +797,10 @@
 	}
     }
 
+    /* ICE session is ready for negotiation */
+    ice_st->state = PJ_ICE_STRANS_STATE_SESS_READY;
+    (*ice_st->cb.on_ice_state)(ice_st, pj_ice_strans_state_name(ice_st->state));
+
     return PJ_SUCCESS;
 
 on_error:
@@ -938,6 +972,8 @@
 	pj_ice_strans_stop_ice(ice_st);
     }
 
+    ice_st->state = PJ_ICE_STRANS_STATE_NEGO;
+    (*ice_st->cb.on_ice_state)(ice_st, pj_ice_strans_state_name(ice_st->state));
     return status;
 }
 
@@ -967,6 +1003,7 @@
 	ice_st->ice = NULL;
     }
 
+    ice_st->state = PJ_ICE_STRANS_STATE_INIT;
     return PJ_SUCCESS;
 }
 
@@ -1242,6 +1279,8 @@
         dump_checklist(valid_list, ice, &ice->valid_list);
         dump_candidates_lists(local_candidates, remote_candidates, ice);
 
+        ice_st->state = (status==PJ_SUCCESS) ? PJ_ICE_STRANS_STATE_RUNNING:PJ_ICE_STRANS_STATE_FAILED;
+	(*ice_st->cb.on_ice_state)(ice_st, pj_ice_strans_state_name(ice_st->state));
 	(*ice_st->cb.on_ice_complete)(ice_st, PJ_ICE_STRANS_OP_NEGOTIATION, status);
     	(*ice_st->cb.on_ice_candidates_chosen)(ice_st, status, rtp_pair, rtcp_pair, duration, local_candidates, remote_candidates, valid_list);
 
