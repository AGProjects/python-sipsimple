"""

on reports
----------

If you set Success-Report header in an outgoing chunk to 'yes', then the
remote party is required by MSRP protocol to generate a Success report, acknowledging
your message. Upon receiving such a report, MSRPChat will post MSRPChatDidDeliverMessage
notification.

If you set Failure-Report to 'partial' or 'yes' or leave it out completely,
you may get either error transaction response or a failure report. Any of this will
be converted to MSRPChatDidNotDeliverMessage.

To customize the values of these headers use success_report and failure_report arguments
of the send_message or send_raw_message.

The default setting of send_raw_message is to leave out these headers completely,
thus enabling MSRP's default:
  * Success-Report: no
  * Failure-Report: yes

The default setting of send_message is to enable end-to-end success reports but
disable hop-to-hop successful confirmations:
  * Success-Report: yes
  * Failure-Report: partial

For is-composing notification, you don't need a success report (what would you
do with it?), however, you should receive failure notifications as their indicate
problems with the connection. Therefore, the following settings should be used:
  * Failure-Report: partial
  * Success-Report: no (default)
"""

from msrplib.connect import MSRPRelaySettings
from msrplib.protocol import URI

class MSRPChat:

    def __init__(self, from_uri, to_uri, outgoing, relay=None, accept_types=['message/cpim'], accept_wrapped_types=['*']):
        """Initialize MSRPChat instance.

        * 'outgoing' (bool) - whether you are an active endpoint or not;
        * 'relay' (MSRPRelaySettings) - if None, no relay is used;
        * 'from_uri' (SIPURI) - what to put in 'From' CPIM header;
        * 'to_uri' (SIPURI) - what to put in 'To' CPIM header;
        * 'accept_types' (list of strings) - to put in SDP media;
          MSRP transport will reject incoming chunks with an invalid media type;
        * 'accept_wrapped_types' (list of strings) - to put in SDP media;
          is not enforced by the transport.
        """
        self.from_uri = from_uri
        self.to_uri = to_uri
        self.outgoing = outgoing
        self.relay = relay
        self.accept_types = accept_types
        self.accept_wrapped_types = accept_wrapped_types

    def initialize(self, local_uri=None):
        """Initialize the MSRP connection; connect to the relay if necessary.
        When done, fire MSRPChatDidInitialize (with 'sdpmedia' attribute,
        containing the appropriate 'SDPMedia' instance)

        * 'local_uri' -  URI instance, if provided passed to msrplib;
          allows customization of connection parameters; can be changed by
          msrplib to reflect the actual connection settings used; automatically
          generated by default.
        """
        raise NotImplementedError

    def start(self, remote_media):
        """Complete the MSRP connection establishment; this includes binding
        MSRP session.

        When done, fire MSRPChatDidStart. At this point each incoming message
        is posted as a notification, MSRPChatGotMessage, with the following
        attributes:
         * cpim_headers (dict)
         * msrp_headers (dict)
         * cpim_content (str) - the actual string that the remote user has typed
        """
        raise NotImplementedError

    def end(self):
        """Close the MSRP connection or cleanup after initialize(), whatever is necessary"""
        raise NotImplementedError

    def _send_raw_message(self, message, content_type, failure_report=None, success_report=None):
        """Send raw MSRP message. For IM prefer send_message.

        Return Message-ID (str), unique string identifying the message.
        """
        raise NotImplementedError

    def send_message(self,
                     message,
                     to=None,
                     content_type='text/plain',
                     dt=None,
                     failure_report='partial',
                     success_report='yes'):
        """Wrap message in Message/CPIM wrapper and send it to the other party.
        If called before the connection was established, the messages will be
        queued until MSRPChatDidStart notification.

        * 'message' - str or unicode instance, content of the message;
        * 'to' - SIPURI instance, "To" header of CPIM wrapper;
          if None, use the default supplied in __init__
        * 'content_type' - str instance, Content-Type of wrapped message;
          (Content-Type of MSRP message is always Message/CPIM in that case)
        * dt - datetime.datetime instance, "DateTime" header of CPIM wrapper;
          if None, datetime.now() is used.

        Return Message-ID (str), unique string identifying the message.
        """
        raise NotImplementedError

