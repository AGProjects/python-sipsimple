
Audio device sharing on Linux
-----------------------------

Some audio devices support hardware mixing, these device can be opened
multiple times from different application natively.  If this is not the
case, you will notice that is not possible to use SIP SIMPLE client SDK and
play music or use other audio applications at the same time with the default
system configuration.

For audio devices that can be opened only once, there are workarounds. More
information about them can be found in section 'The card does not support
hardware mixing', at http://alsa.opensrc.org/index.php/AlsaSharing


Using dmix and dsnoop ALSA plugins
----------------------------------

One of the workarounds is to modify /etc/asound.conf, for all uses in the
system, or ~/.asoundrc for the user that runs python-simsiple as follows:

pcm.card0 {
  type hw
  card 0
}
pcm.dmix0 {
  type dmix
  ipc_key 34521
  slave {
    pcm "card0"
    rate 16000
    period_size 320
    buffer_size 10240
  }
}
pcm.dsnoop0 {
  type dsnoop
  ipc_key 34521
  slave {
    pcm "card0"
    rate 16000
    period_size 320
    buffer_size 10240
  }
}
pcm.asym0 {
  type asym
  playback.pcm "dmix0"
  capture.pcm "dsnoop0"
}
pcm.pasym0 {
  type plug
  slave.pcm "asym0"
}
pcm.dsp0 {
  type plug
  slave.pcm "asym0"
}
ctl.dsp0 {
  type hw
  card 0
}
pcm.!default {
  type plug
  slave.pcm "pasym0"
}
ctl.!default {
  type hw
  card 0
}

The above configuration sets as system default a special device called
pasym0 that uses asym, an ALSA plugin that combines the dsnoop input plugin
and dmix output into one full-duplex device.  The dsnoop and dmix plugins
allows for concurrent access from multiple applications to the same physical
audio device for input and output respectively mixing and converting the
sample rates accordingly.

Note. It is important that other audio applications also access the same
virtual device, otherwise is still possible to block the access to the audio
card by opening it first from an application that does not use pasym0 as the
default device.  For example is not possible to use this setup while other
applications use PulseAudio or other sound server that access the audio
device directly.


Using PulseAudio
----------------

Another workaround is to configure ALSA to route the requests the audio card
to the PulseAudio sound server, which in turn is performing the mixing from
all applications and accesses the audio device directly.

Modify /etc/asound.conf, for all uses in the system, or ~/.asoundrc for the
user that runs python-simsiple as follows:

pcm.pulse {
    type pulse
}
ctl.pulse {
    type pulse
}
pcm.!default {
    type pulse
}
ctl.!default {
    type pulse
}

Note. PulseAudio introduces additional delay into the processing. This
solution offers more compatibility with other applications but is less
performant than when using dmix and dsnoop plugins.

