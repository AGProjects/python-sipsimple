
Audio Device Sharing on Linux
-----------------------------

Some audio devices support hardware mixing, these device can be opened
multiple times from different application natively. If this is not the case,
you will notice that is not possible to use SIP SIMPLE client SDK and play
music or use other audio applications at the same time with the default
system configuration.

For audio devices that can be opened only once, there are workarounds. More
information about them can be found in section 'The card does not support
hardware mixing', at http://alsa.opensrc.org/index.php/AlsaSharing


Using dmix and dsnoop ALSA plugins
----------------------------------

One of the workarounds is to create or modify /etc/asound.conf, for all uses
in the system or ~/.asoundrc, valid only for the user that runs
python-simsiple as follows:

pcm.card0 {
  type hw
  card 0
}
pcm.dmix0 {
  type dmix
  ipc_key 34521
  slave {
    pcm "card0"
    rate 16000
    period_size 320
    buffer_size 10240
  }
}
pcm.dsnoop0 {
  type dsnoop
  ipc_key 34521
  slave {
    pcm "card0"
    rate 16000
    period_size 320
    buffer_size 10240
  }
}
pcm.asym0 {
  type asym
  playback.pcm "dmix0"
  capture.pcm "dsnoop0"
}
pcm.pasym0 {
  type plug
  slave.pcm "asym0"
}
pcm.dsp0 {
  type plug
  slave.pcm "asym0"
}
ctl.dsp0 {
  type hw
  card 0
}
pcm.!default {
  type plug
  slave.pcm "pasym0"
}
ctl.!default {
  type hw
  card 0
}

What the above configuration does, is to create a special device called
pasym0 (you may rename this as you wish) that used asym plugin, whihc is an
ALSA plugin that combines plugins like dsnoop and dmix into one full-duplex
device. The dsnoop and dmix plugins allows for concurrent access from
multiple applications to the same physical audio device for input and output
respectively mixing and converting the sample rates accordingly.

You can instruct SIP SIMPLE client SDK to use pasym0 as the main device:

sip-settings -g set audio.input_device=pasym0
sip-settings -g set audio.output_device=pasym0
sip-settings -g set audio.alert_device=pasym0

Note. It is important that other applications in the system also access the
same virtual device, otherwise is still possible to block the access to the
audio card by opening it first from an application that does not use pasym0
as the default device.  For example is not possible to use this setup while
other applications use PulseAudio or other sound server that access the
audio device directly.


Using PulseAudio
----------------

Another workaround is to configure ALSA to route requests that are meant for
the audio card to the PulseAudio sound server, which in turn is performing
the mixing from all applications and accessed the ALSA device directly.

For this create or modify /etc/asound.conf, for all uses in the system or
~/.asoundrc, valid only for the user that runs python-simsiple as follows:

pcm.pulse {
    type pulse
}
ctl.pulse {
    type pulse
}
pcm.!default {
    type pulse
}
ctl.!default {
    type pulse
}

Note. PulseAudio may introduce additional delay into the processing. This
solution is more compatible with other applications but less performant than
when using dmix and dsnoop plugins.

